'#############################################################################################################################
'## author:                 todd busch
'##
'## date:                   01/09/2023
'##
'## description:            this script is used to kick off the office automation package for caregiver workflows; it
'##							downloads the latest copy of the employment inquiry list.xlsx doc and then runs the workflow
'##							scripts one at a time
'##
'## notes:                  download location needs to default to the downloads folder for the windows user. a variable in
'##							CG-globalVariables stores the path to that location. update that variable for the current user
'##							and ensure chrome is set to default to that folder for downloads before running
'##
'#############################################################################################################################

'#############################################################################################################################
'##   													scan prep									 						##
'#############################################################################################################################
include "C:\v-angels-automation\framework\CG-globalDimDeclarations\CG-globalDimDeclarations.src"
include "C:\v-angels-automation\framework\CG-globalFunctions\CG-globalFunctions.src"
include "C:\v-angels-automation\framework\CG-globalSubDefinitions\CG-globalSubDefinitions.src"
include "C:\v-angels-automation\framework\CG-globalVariables\CG-globalVariables.src"


#ignoreerrors = 1


currScript$ = "CG-initiateScan"


iYr$ = Year$()
iMo$ = Month$()
iDay$ = Day$()
iHr$ = Hour$()
iMin$ = Min$()


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": STARTING INTERVAL SCAN", crlf)
write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": STARTING INTERVAL SCAN", crlf)


'-------------------------------------------------------------------------------------------------------------------------------- download latest employment inquiry doc
write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": downloading latest version of employment inquiry list.xlsx", crlf)


'-------------------- invoke sharepoint page
res = startbrowser("CH", employmentInquirySharePointPath$, 3)
'------- error handling
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": unable to load employment inquiry sharepoint page", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-invoke_browser.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": browser invoked and loaded sharepoint page", crlf)
endif


'-------------------- select employment inquiry doc
usewindow( "CHROME.EXE|Chrome_WidgetWin_1|CareGiver Portal - WinTask Data - All Documents - Google Chrome", 1)
if iEnvironment = 1 then
	res = clickonbitmap(imagePath$ + "sharepoint-excelIcon.bmp", left, single)	'easiest way to set focus to row given issues wintask has seeing/clicking certain containing elements
	'------- error handling
	if res <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": could not set focus to document row", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-sel_doc_row_.bmp", 1, 1)
		closebrowser()
		criticalStop()
	endif
endif
if iEnvironment = 2 then
	clickmouse(left, down, 330, 421, absolute)
	clickmouse(left, up, 330, 421, absolute)
endif
'------- debug logging
write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": selected employment inquiry doc row", crlf)


'-------------------- click download link
usepage("CareGiver Portal - WinTask Data - All Documents")
res = clickhtmlelement("SPAN[OUTERTEXT='Download', INDEX=2]")
'------- error handling
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking download link", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-click_download_.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": clicked download link", crlf)
endif
pause 2

'-------------------- click save
usewindow("CHROME.EXE|#32770|Save As", 4)
res = click(button, "&Save")
'------- error handling
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking save button", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-click_save_.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": clicked save", crlf)
endif


'-------------------- allow doc to complete download
pause 3


'-------------------- copy to package directory
res = filecopy(localWinUser$ + "Downloads\Employment Inquiry List.xlsx", employmentInquiryPath$, forced)
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error copying doc to package folder", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-file_copy_.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": copied worksheet into automation package directory", crlf)
endif


closebrowser()


res = kill(localWinUser$ + "Downloads\Employment Inquiry List.xlsx")


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": latest version download complete", crlf)


'#############################################################################################################################
'##   													scan start									 						##
'#############################################################################################################################
run(scriptsPath$ + "CG-adobeSendPackets\CG-adobeSendPackets.rob")
run(scriptsPath$ + "CG-adobeCancelPackets\CG-adobeCancelPackets.rob")
run(scriptsPath$ + "CG-zipWhipSendScheduleInittxt\CG-zipWhipSendScheduleInittxt.rob")
run(scriptsPath$ + "CG-gmsFormSubmit\CG-gmsFormSubmit.rob")
run(scriptsPath$ + "CG-gmsTerminations\CG-gmsTerminations.rob")


'#############################################################################################################################
'##   													scan end									 						##
'#############################################################################################################################
res = name(employmentInquiryPath$, emplInquiryArchivePath$ + "Employment Inquiry List-" + iYr$ + iMo$ + iDay$ + "-" + iHr$ + iMin$ + ".xlsx")


if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Employment Inquiry doc archived", crlf)
else
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Error archiving Employment Inquiry doc; error_code: (" + str$(res) + ")", crlf)	
endif


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": -------------------------------------- END OF SCAN ------------------------------------------------------------------------------", crlf + crlf)
write(executionLogPath$, basicLogHdr$ + "-------------------------------------- END OF SCAN ------------------------------------------------------------------------------", crlf + crlf)
write(scanFailuresPath$, basicLogHdr$ + "-------------------------------------- END OF SCAN ------------------------------------------------------------------------------", crlf + crlf)
write(successLogPath$, basicLogHdr$ + "-------------------------------------- END OF SCAN ------------------------------------------------------------------------------", crlf + crlf)
