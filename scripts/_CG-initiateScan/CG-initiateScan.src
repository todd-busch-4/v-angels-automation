'#############################################################################################################################
'## author:                 todd busch
'##
'## description:            this script is used to kick off the office automation scan for caregiver workflows; it
'##							downloads the latest copy of the employment inquiry list.xlsx doc and then runs the workflow
'##							scripts one at a time
'##
'## notes:                  download location needs to default to the downloads folder for the windows user and chrome
'##							settings configured to "not ask each time" (location) when downloading. a variable in
'##							CG-globalVariables stores the path to that location
'##
'#############################################################################################################################

'#############################################################################################################################
'##   													scan prep									 						##
'#############################################################################################################################
include "C:\v-angels-automation\framework\CG-globalDimDeclarations\CG-globalDimDeclarations.src"
include "C:\v-angels-automation\framework\CG-globalLogging\CG-globalLogging.src"
include "C:\v-angels-automation\framework\CG-globalFunctions\CG-globalFunctions.src"
include "C:\v-angels-automation\framework\CG-globalSubDefinitions\CG-globalSubDefinitions.src"
include "C:\v-angels-automation\framework\CG-globalVariables\CG-globalVariables.src"


#ignoreerrors = 1


currScript$ = "CG-initiateScan"


iYr$ = Year$()
iMo$ = Month$()
iDay$ = Day$()
iHr$ = Hour$()
iMin$ = Min$()


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": -------------------------------------- INTERVAL SCAN START ---------------------------------------", crlf + crlf)
write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + "-------------------------------------- INTERVAL SCAN START ---------------------------------------", crlf + crlf)
write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + "-------------------------------------- INTERVAL SCAN START ---------------------------------------", crlf + crlf)


'-------------------------------------------------------------------------------------------------------------------------------- download latest employment inquiry doc
write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ======================================== SCAN PREP ==========================================", crlf)
write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": downloading latest version of employment inquiry list.xlsx", crlf)


'-------------------- invoke sharepoint page
res = startbrowser("CH", employmentInquirySharePointPath$, 3)
'------- error handling
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": unable to load employment inquiry sharepoint page", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: [" + str$(res) + "]  msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-invoke_browser.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": browser invoked and sharepoint page loaded", crlf)
endif
pause 10
endpause

'-------------------- select employment inquiry doc
usewindow( "CHROME.EXE|Chrome_WidgetWin_1|CareGiver Portal - WinTask Data - All Documents - Google Chrome", 1)
clickmouse(left, down, 600, 450, absolute)
clickmouse(left, up, 600, 450, absolute)
logMsgStd("selected document row")
pause 2
endpause

'-------------------- click download link
usepage("CareGiver Portal - WinTask Data - All Documents")
res = clickhtmlelement("SPAN[OUTERTEXT='Download', INDEX=2]")
'------- error handling
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking download link", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: [" + str$(res) + "] msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-click_download_.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": clicked download link", crlf)
endif


'-------------------- allow doc to complete download
pause 5
endpause


'-------------------- copy to package directory
res = filecopy(localWinUser$ + "Downloads\Employment Inquiry List.xlsx", employmentInquiryPath$, forced)
if res <> 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error copying doc to package folder", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: [" + str$(res) + "]  msg: " + #errormsg$, crlf)
	hardcopy(screenshotsPath$ + currScript$ + "-file_copy_.bmp", 1, 1)
	closebrowser()
	criticalStop()
endif
'------- debug logging
if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": worksheet copied into automation package directory", crlf)
endif


closebrowser()


res = kill(localWinUser$ + "Downloads\Employment Inquiry List.xlsx")


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": download of latest version complete", crlf + crlf)
write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ---------------------------------------------------------------", crlf + crlf)


'#############################################################################################################################
'##   													scan start									 						##
'#############################################################################################################################
run(scriptsPath$ + "CG-zipwhipInitTxtMsgs\CG-zipwhipInitTxtMsgs.rob")
run(scriptsPath$ + "CG-adobeSendPackets\CG-adobeSendPackets.rob")
run(scriptsPath$ + "CG-gmsSubmitForm\CG-gmsSubmitForm.rob")
run(scriptsPath$ + "CG-arcsSubmitApp\CG-arcsSubmitApp.rob")
run(scriptsPath$ + "CG-adobeCancelPackets\CG-adobeCancelPackets.rob")
run(scriptsPath$ + "CG-gmsAddLegalFee\CG-gmsAddLegalFee.rob")
run(scriptsPath$ + "CG-arcsGetBackup\CG-arcsGetBackup.rob")
run(scriptsPath$ + "CG-gmsTerminations\CG-gmsTerminations.rob")
run(scriptsPath$ + "CG-arcsCloseApp\CG-arcsCloseApp.rob")
run(scriptsPath$ + "CG-arcsEnterFPrintDate\CG-arcsEnterFPrintDate.rob")


'#############################################################################################################################
'##   													scan end									 						##
'#############################################################################################################################
res = name(employmentInquiryPath$, emplInquiryArchivePath$ + "Employment Inquiry List-" + iYr$ + iMo$ + iDay$ + "-" + iHr$ + iMin$ + ".xlsx")


if res = 0 then
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Employment Inquiry doc archived", crlf)
else
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Error archiving Employment Inquiry doc; error_code: [" + str$(res) + "]", crlf)	
endif


write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": -------------------------------------- INTERVAL SCAN COMPLETE ------------------------------------", crlf + crlf)
write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + "-------------------------------------- INTERVAL SCAN COMPLETE ------------------------------------", crlf + crlf)
write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + "-------------------------------------- INTERVAL SCAN COMPLETE ------------------------------------", crlf + crlf)
