'###############################################################################################################################################################
'##  filename:						cg-gmsFunctions
'##
'##  purpose:						library of functions for use in GMS workflow script development in order to minimize code duplication, increase script
'##									cleanliness/readability, and reduce maintenance efforts by providing a single centralized location for changes
'##
'###############################################################################################################################################################

'=============================================================================================================================================================
'== function name:          	gmsCompanyChk
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks to make sure the active company displayed at the top of the gms enhanced dashboard window matches the target company
	'==							defined in the globalVariables sTargetCompany$ variable. if it does not it attempts to select the target company
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - on match or success selecting
	'==									1 - failure to select target company
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsCompanyChk()
	local r

	r = useocrengine(3)
	sCompany$ = captureareaocr$(wndGMSEnhancedDashboard$, topinstance(), 823, 138, 28, 472)
	sActiveCompany$ = mid$(sCompany$, 12, 5)

	if sActiveCompany$ = sTargetCompany$ then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": target company: (" + sTargetCompany$ + ") is active", crlf)
		gmsCompanyChk = 0
		exitfunction
	endif

	if sActiveCompany$ <> sTargetCompany$ then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": active company: (" + sActiveCompany$ + ") is not target company: (" + sTargetCompany$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": switching companies", crlf)
		r = useocrengine(3)
		usewindow(wndGMSEnhancedDashboard$, 1)
		clickontextocr("(" + sActiveCompany$ + ")", left, single, inarea(749, 138, 685, 28))

		usepage(pgGMSCompanySrc$)
		clickhtmlelement("TD[OUTERTEXT='" + sTargetCompany$ + "']")

		sCompany$ = captureareaocr$(wndGMSEnhancedDashboard$, topinstance(), 823, 138, 28, 472)
		sActiveCompany$ = mid$(sCompany$, 12, 5)
		if sActiveCompany$ = sTargetCompany$ then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": target company: (" + sTargetCompany$ + ") is now active", crlf)
			gmsCompanyChk = 0
			exitfunction
		else
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": script could not set the target company active", crlf)
			closebrowser()
			gmsCompanyChk = 1
			exitfunction
		endif
	endif

endfunction

'=============================================================================================================================================================
'== function name:          	gmsSubmitChkStatus
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks value of gms status column for value to trigger form submission
	'==
	'== returns:                int:	0 - status matched trigger	  
	'==									1 - value did not match trigger
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/

function gmsSubmitChkStatus()

	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking gms status", crlf)
	if instr(gmsStatus$, "New Hire Invited") = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms entry", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status of column: (" + gmsStatus$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms entry; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": SSN: " + applicantSSN$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: status not set for gms entry", crlf + crlf)
		gmsSubmitChkStatus = 1
		exitfunction
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant set for gms entry", crlf)
		gmsSubmitChkStatus = 0
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:   	       gmsSubmitPopupChk
	'==
	'== developer:             todd busch
	'==
	'== purpose:               checks for popup indicating an applicant had previsouly been set to "no-rehire"
	'==
	'== input parms:           none
	'==
	'== returns:               int - 	0 if warning found or ocrengine failure to continue; 
	'==									1 if any other error/warning was found
	'==
	'== notes:                 none
	'==
'=============================================================================================================================================================*/
function gmsSubmitPopupChk()
	local r, err$

	r = useocrengine(3)

	'return 0 to continue if ocrengine fails
	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ocrengine failed trying to capture error popup", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
		gmsSubmitPopupChk = 0
		exitfunction
	endif

	'capture ocr in area where popup is typically displayed
	err$ = captureareaocr$(wndGMSRehireForm$, topinstance(), 731, 459, 244, 502)

	'exit function if no error popup found
	if instr(err$, "gmsprismhicom") = 0 then
		gmsSubmitPopupChk = 0
		exitfunction
	endif

	'if popup error is found...
	if instr(err$, "gmsprismhicom") <> 0 then

		'log msg for no-rehire designation
		if instr(err$, "No-Rehire") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant was set to 'no-rehire'", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": dismissing warning and continuing to submit rehire form", crlf)
			usewindow(wndGMSRehireForm$, 1)
			sendkeys("<enter>", noactivate)
			gmsSubmitPopupChk = 0
			exitfunction
		endif

		'return msg for employed status 'a'
		if instr(err$, "You may not perform a Rehire on an employee with a status of") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to current employee with status 'A'", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
			write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - status 'a' employee", crlf + crlf)
			closebrowser()
			gmsSubmitPopupChk = 1
			exitfunction
		endif

		'handle dup ssn error for previous employee
		if instr(err$, "belongs to") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to a previous employee; proceeding to rehire form", crlf)
			gmsSubmitPopupChk = 2
			exitfunction
		endif

		'look for & return dup ssn error - onboarding
		if instr(err$, "onboarding") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to applicant in onboarding", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
			write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to applicant in onboarding; proceeding to next change event", crlf + crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsSubmitPopupChk - applicant in onboarding", crlf + crlf)
			gmsSubmitPopupChk = 1
			closebrowser()
			exitfunction
		endif

		'catch all for unknown errors
		err$ = mid$(err$, 18, 200)		'trim var to just msg text
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": an unknown error occurred", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + err$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsSubmitNoRehireChk - " + err$, crlf + crlf)
		closebrowser()
		gmsSubmitPopupChk = 1
		exitfunction

	endif

endfunction

'=============================================================================================================================================================
'== function name:  	        gmsTermsChkStatus
	'==
	'== developer:              todd busch
	'==
	'== purpose:                evaluate the value of the gms status column to determine if triggers the termination or not
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - if status matched a triggering value and should continue
	'==									1 - if status did not match a triggering value and should bypass
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsTermsChkStatus()

	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking gms status", crlf)
	if instr(gmsStatus$, "Termed Rehire") = 0 and instr(gmsStatus$, "DO NOT HIRE Termed") = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms termination", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status of column: (" + gmsStatus$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms termination; proceeding to next change event", crlf + crlf)
		gmsTermsChkStatus = 1
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status set for gms termination", crlf)
		gmsTermsChkStatus = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:   	       gmsTermsChkStage
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks current stage variable value for the current row for existence of trigger stages
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - if any of the triggering values is found
	'==									1 - if no triggering values are found
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsTermsChkStage()

	if curr_stage$ = "Termed ReHire" or curr_stage$ = "LOA / In-Active Employee" or curr_stage$ = "NO ReHire Termed" then
		gmsTermsChkStage = 0
	else
		gmsTermsChkStage = 1
	endif

endfunction

'=============================================================================================================================================================
'== function name:          	gmsTermsLogStats
	'==
	'== developer:              todd busch
	'==
	'== purpose:                logs the end of workflow messages/data to log files for Terminations script
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - for success
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsTermsLogStats()
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:                    " + str$(iEventCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": events w/qualifying stages:                " + str$(iStageCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": terminations processed:                    " + str$(iProcessed), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:                    " + str$(iEventCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": events w/qualifying stages:                " + str$(iStageCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": terminations processed:                    " + str$(iProcessed), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)

	gmsTermsLogStats = 0
endfunction

'=============================================================================================================================================================
'== function name:          	gmsTermsErrorChck
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks for error popup when exiting the search field and handles certain known errors individually. contains a general "catch-all"
	'==							if statement for all unkown errors that could be returned
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - if no error popup was displayed
	'==									1 - if there was an error 
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsTermsErrorChk()
	local r, err$

	r = useocrengine(3)

	'return error if ocrengine fails
	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ocrengine failed trying to capture error popup", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
		gmsTermsErrorChk$ = "0"
		exitfunction
	endif

	'capture area error popup is typically displayed in
	err$ = captureareaocr$(pgGMSNewHireForm$, topinstance(), 739, 467, 191, 442)

	'exit function if no error found
	if err$ = "" then
		gmsTermsErrorChk = 0
		exitfunction
	endif

	'check for in onboarding error
	if instr(err$, "This person is still being OnBoarded") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee is still being onboarded", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee in onboarding; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsTermsErrorCheck - employee in onboarding", crlf + crlf)
		closebrowser()
		gmsTermsErrorChk = 1
		exitfunction
	endif

	'check for already terminated
	if instr(err$, "already terminated") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee is already terminated", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee is already terminated; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsTermsErrorCheck - employee is already terminated", crlf + crlf)
		closebrowser()
		gmsTermsErrorChk = 1
		exitfunction
	endif

	'catch-all for any other errors
	if err$ <> "" then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error was encountered entering search criteria", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_msg: (" + err$ + ") msg: ", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsTermsErrorCheck - src criteria error", crlf + crlf)
		gmsTermsErrorChk = 1
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:          	gmsTermsEarlyDateChk
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks for date before hire date error popup when entering loa/termination date. if found it updates the loa/termination date
	'==							to the day after the hire date listed in the error
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - if error not found
	'==									1 - if error found
	'==
	'== notes:                  after function is exited code to handle reentering with the updated date is in the script itself
	'==
'=============================================================================================================================================================*/
function gmsTermsEarlyDateChk()
	local r, err$, iEnd

	r = useocrengine(3)

	'return error if ocrengine fails
	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ocrengine failed trying to capture error popup", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
		gmsTermsEarlyDateChk$ = "0"
		exitfunction
	endif

	'capture area error popup is typically displayed in
	err$ = captureareaocr$(wndGMSTerminationForm$, topinstance(), 739, 467, 191, 442)

	'check for error text
	if instr(err$, "is prior to employee's hire date") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": termination date before hire date", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adjusting the termination date", crlf)

		'extract the hire date and update term date variable
		iEnd = instr(err$, ",")
		termedLOADate$ = mid$(err$, iEnd - 10, 10)
		termedLOADate$ = DatetoDate$("d", 1, termedLOADate$)
		termedLOADate$ = zeroPadDate$(termedLOADate$)
		
		'close error popup dialogbox
		usewindow(wndWindowsDesktop$)
		clickmouse(left, double, 1120, 600, absolute)
		pause 1

		gmsTermsEarlyDateChk = 1
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:				gmsAddLegalStageChk
	'==
	'== developer:              todd busch
	'==
	'== purpose:                determines if current stage value matches a triggering stage for the workflow
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - success/match
	'==									1 = fail/no match
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsAddLegalStageChk()
	if curr_stage$ = "On-board" or curr_stage$ = "On-board INTRO" or curr_stage$ = "Active Employee" then
		gmsAddLegalStageChk = 0
		exitfunction	
	else
		gmsAddLegalStageChk = 1
	endif
endfunction

'=============================================================================================================================================================
'== function name:				gmsAddLegalStatusChk
	'==
	'== developer:              todd busch
	'==
	'== purpose:                check status columns for values that trigger workflow
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - success
	'==									1 - failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsAddLegalStatusChk()
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking gms connect & legal shield for triggering values", crlf)
	if instr(gmsStatus$, "Active") <> 0 or instr(gmsStatus$, "I-9 ready for review") <> 0 and gmsLegalShield$ = "-1" then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": values are set for deduction entry", crlf)
		gmsAddLegalStatusChk = 0
		exitfunction
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": statuses not set for deduction entry", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status of gms connect column: (" + gmsStatus$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status of legal shield column: (" + gmsLegalShield$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for deduction entry; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employee: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsAddLegalStatusChk - non-triggering value", crlf + crlf)
		gmsAddLegalStatusChk = 1
		exitfunction
	endif
endfunction

'=============================================================================================================================================================
'== function name:          	gmsAddLegalLogStats
	'==
	'== developer:              todd busch
	'==
	'== purpose:                logs the end of workflow messages/data to log files for add legal deduction script
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - for success
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsAddLegalLogStats()
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:                    " + str$(iEventCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": events w/qualifying stages:                " + str$(iStageCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": deductions added:                          " + str$(iCompleted), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:                    " + str$(iEventCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": events w/qualifying stages:                " + str$(iStageCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": deductions added:                          " + str$(iCompleted), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)

	gmsAddLegalLogStats = 0
endfunction

'=============================================================================================================================================================
'== function name:				gmsSubmitFormLogStats
	'==
	'== developer:              todd busch
	'==
	'== purpose:                logs the end of workflow messages/data to log files for SubmitForm script
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - success
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function gmsSubmitFormLogStats()

	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:               " + str$(iEventCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events with 'On-board' stage:  " + str$(iOnboardCnt), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": gms forms submitted:                  " + str$(iOnboardCompl), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:               " + str$(iEventCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events with 'On-board' stage:  " + str$(iOnboardCnt), crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": gms forms submitted:                  " + str$(iOnboardCompl), crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)
	write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf + crlf)

	gmsSubmitFormLogStats = 0
endfunction

function gmsTermsFmtDates$()
	local r

	r = instrrev(termedLOADate$, "/")
	termedLOADate$ = left$(termedLOADate$, r + 4)
	termedLOADate$ = zeroPadDate$(termedLOADate$)
	gmsTermsFmtDates$ = termedLOADate$

endfunction