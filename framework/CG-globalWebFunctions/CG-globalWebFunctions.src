'#############################################################################################################################################################
'##  filename:				cg-globalWebfunctions
'##
'##  purpose:				library of general web functions for use in caregiver workflow script development in order to minimize code duplication, increase
'##							script cleanliness/readability, and reduce maintenance efforts by providing a single centralized location for changes
'##
'#############################################################################################################################################################

'=============================================================================================================================================================
'== function name:          	webInvokeBrowser
	'==
	'== developer:              todd busch
	'==
	'== purpose:				attempts to start the specified browser and load the specified url. if an error is encountered it will retry the number of
	'==							times defined in iRetry (default: 3). if number of retry attempts defined is exceeded it will log messages, close the
	'==							browser, and return the error code
	'==
	'== input parms:            str_app$:	browser code to invoke ("CH" = Chrome  "FF" = FireFox)
	'==							str_url$:	url to navigate to
	'==
	'== returns:                int:	0 - on success
	'==							error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webInvokeBrowser(str_app$, str_url$)
	local iRetry, r, iAttempt

	while iRetry <= 2
		r = startbrowser(str_app$, str_url$, 3)
		pause 3
		iAttempt = iRetry + 1

		if r = 0 then
			iRetry = 3
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": start browser was successful", crlf)
			webInvokeBrowser = 0
			exitfunction
		endif

		if r <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error starting browser attempt #: [" + str$(iAttempt) + "]", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: [" + str$(r) + "], retrying", crlf)
			hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-invoke_browser-" + str$(iAttempt) + ".bmp", 1, 1)
			closebrowser()
			pause 1
			iRetry = iRetry + 1
		endif
	wend

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": browser could not be invoked after [" + str$(iAttempt) + "] attempts", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		closebrowser()
		webInvokeBrowser = r
	endif

EndFunction

'=============================================================================================================================================================
'== function name:           	webEnterText
	'==
	'== developer:              todd busch
	'==
	'== purpose:                writehtml web function with error-handling/logging
	'==
	'== input parms:            str_object$:	descriptor of the html object to receive text
	'==							str_text$:		the text to enter into the object
	'==							str_step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                int:	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webEnterText(str_object$, str_text$, str_step$)
	local r, str_object$, str_text$, str_step$

	r = writehtml(str_object$, str_text$)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " was successful", crlf)
		webEnterText = 0
		exitfunction
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " error" , crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + str_step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + str_step$, crlf + crlf)
		closebrowser()
		webEnterText = r 
	endif

EndFunction

'=============================================================================================================================================================
'== function name:           	webPasteText
	'==
	'== developer:              todd busch
	'==
	'== purpose:                writehtmlpaste web function with error-handling/logging
	'==
	'== input parms:            str_object$:	descriptor of the html object to receive text
	'==							str_text$:		the text to enter into the object
	'==							str_step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                int:	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webPasteText(str_object$, str_text$, str_step$)
	local r, writehtmlpaste$, str_text$, str_step$

	r = writehtmlpaste(str_object$, str_text$, delete)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " was successful", crlf)
		webPasteText = 0
		exitfunction
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " error", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + str_step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + str_step$, crlf + crlf)
		closebrowser()
		webPasteText = r
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:           	webClickElement
	'==
	'== developer:              todd busch
	'==
	'== purpose:                clickhtmlelement web function with error-handling/logging
	'==
	'== input parms:            str_object$:	descriptor of the html object to click
	'==							str_step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                int: 	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webClickElement(str_object$, str_step$)
	local r, str_object$, str_step$

	r = clickhtmlelement(str_object$)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " was successful", crlf)
		webClickElement = 0
		exitfunction
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " error", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + str_step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + str_step$, crlf + crlf)
		closebrowser()
		webClickElement = r
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:           	webSelectItem
	'==
	'== developer:              todd busch
	'==
	'== purpose:                selecthtmlitem web function with error-handling/logging
	'==
	'== input parms:            str_object$:	descriptor of the html object
	'==							str_item$:		the item/value to select
	'==							str_step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                int:	0 - on success
	'==									error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webSelectItem(str_object$, str_item$, str_step$)
	local r, str_object$, str_item$, str_step$

	r = selecthtmlitem(str_object$, str_item$)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " was successful", crlf)
		webSelectItem = 0
		exitfunction
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " error", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + str_step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + str_step$, crlf + crlf)
		closebrowser()
		webSelectItem = r
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:           	webLeftSingleClickOCRText
	'==
	'== developer:              todd busch
	'==
	'== purpose:                clickontextocr web function with error-handling/logging
	'==
	'== input parms:            str_text$:		the text to look for
	'==							int_area1:		x coordinate to the topleft point of the area to look in
	'==							int_area2:		y coordinate to the topleft point of the area to look in
	'==							int_area3:		height of the area to look in
	'==							int_area4:		width of the area to look in
	'==							int_offset1:	x coordinate specifying an offset distance from the middl#End Region
	'==							int_offset2:	y coordinate specifying an offset distance from the middl#End Region
	'==							str_step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                int:	0 - on success
	'==									error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webLeftSingleClickOCRText(str_text$, int_area1, int_area2, int_area3, int_area4, int_offset1, int_offset2, str_step$)
	local r, res, str_text$, int_area1, int_area2, int_area3, int_area4, int_offset1, int_offset2, str_step$

	res = useocrengine(3)

	r = clickontextocr(str_text$, left, single, inarea(int_area1, int_area2, int_area3, int_area4), int_offset1, int_offset2)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " was successful", crlf)
		webLeftSingleClickOCRText = 0
		exitfunction
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_step$ + " error", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + str_step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + str_step$, crlf + crlf)
		closebrowser()
		webLeftSingleClickOCRText = r
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:           	webNavigate
	'==
	'== developer:              todd busch
	'==
	'== purpose:                the wintask navigate function wrapped with error-handling/logging
	'==
	'== input parms:            str_url$:		the url of the page to navigate to
	'==							str_page$:		name of the page for logging purposes
	'==
	'== returns:                int:	load time of the page in ms
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webNavigate(str_url$, str_page$)
	local r, str_url$, str_page$

	r = navigate(str_url$)
	
	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": navigated to " + str_page$ + " page", crlf)
		webNavigate = 0
		exitfunction
	endif

	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error navigating to [" + str_page$ + "] page", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-nav_to_" + str_page$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - navigating to " + str_page$, crlf + crlf)
		closebrowser()
		webNavigate = r
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:				webGetHtmlEditText$
	'==
	'== developer:              todd busch
	'==
	'== purpose:                gethtmledittext web function with error-handling/logging
	'==
	'== input parms:            str_object$:	html descriptor for the object to get the text/value from
	'==
	'== returns:                str:	success - the text/value extracted from the object
	'==									failure - "error"
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function webGetHtmlEditText$(str_object$)
	local r, str_object$, str_val$

	r = gethtmledittext(str_object$, str_val$)

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error getting text from object", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		webGetHtmlEditText$ = "error"
		exitfunction
	else
		webGetHtmlEditText$ = val$
		exitfunction
	endif

endfunction