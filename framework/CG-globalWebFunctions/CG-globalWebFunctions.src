/*#############################################################################################################################################################
##  filename:						cg-globalWebfunctions
##
##  purpose:						library of web-based functions for use in caregiver workflow script development in order to minimize code
##									duplication, increase script cleanliness/readability, and reduce maintenance efforts by providing a single
##									centralized location for changes
##
##  contents:						webEnterText, webPasteText, webClickElement, webSelectItem, webLeftSingleClickOCRText, webNavigate
##
#############################################################################################################################################################*/

'=============================================================================================================================================================
'== function name:          webInvokeBrowser
	'==
	'== developer:              todd busch
	'==
	'== purpose:				attempts to start the specified browser and load the specified url. if an error is encountered it will retry the number of
	'==							times defined in iRetry (default: 3). if number of retry attempts defined is exceeded it will log messages, close the
	'==							browser, and return the error code
	'==
	'== input parms:            str_app$:	browser code to invoke ("CH" = Chrome  "FF" = FireFox)
	'==							str_url:	url to navigate to
	'==
	'== returns:                int:	0 - on success
	'==							error_code - on failure
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================*/
function webInvokeBrowser(str_app$, str_url$)
	local iRetry, r, iAttempt

	while iRetry <= 2
		r = startbrowser(str_app$, str_url$, 3)
		pause 3
		iAttempt = iRetry + 1

		if r = 0 then
			iRetry = 3
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": start browser was successful", crlf)
			webInvokeBrowser = 0
			exitfunction
		endif

		if r <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error starting browser on attempt #: [" + str$(iAttempt) + "]", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "), retrying", crlf)
			hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-invoke_browser-" + str$(iAttempt) + ".bmp", 1, 1)
			closebrowser()
			pause 1
			iRetry = iRetry + 1
		endif
	wend

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": browser could not be invoked after [" + str$(iAttempt) + "] attempts", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		closebrowser()
		webInvokeBrowser = r
	endif

EndFunction

'=============================================================================================================================================================
'== function name:           webEnterText
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 enters specified text into the specified html element with error-handling/logging
	'==
	'== input parms:            	object$:	descriptor of the html object to receive text
	'==							text$:		the text to enter into the object
	'==							step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                 int:	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                   none
	'==
'=============================================================================================================================================================*/
function webEnterText(object$, text$, step$)
	local r

	r = writehtml(object$, text$)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " was successful", crlf)
		webEnterText = 0
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error " + step$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-enter_" + step$ + ".bmp", 1, 1)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + step$, crlf + crlf)
		closebrowser()
		webEnterText = r 
	endif

EndFunction

'=============================================================================================================================================================
'== function name:           webPasteText
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 pastes specified text into the specified html object wrapped with error-handling/logging
	'==
	'== input parms:            	object$:	descriptor of the html object to receive text
	'==							text$:		the text to enter into the object
	'==							step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                 int:	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                   pertinentinfo
	'==
'=============================================================================================================================================================*/
function webPasteText(object$, text$, step$)
	local r

	r = writehtmlpaste(object$, text$, delete)

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " was successful", crlf)
		webPasteText = 0
	endif

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error " + step$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-enter_" + step$ + ".bmp", 1, 1)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + step$, crlf + crlf)
		closebrowser()
		webPasteText = r 
	endif

endfunction

'=============================================================================================================================================================
'== function name:           webClickElement
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 perform a single left mouse click on the specified html element with error-handling/logging
	'==
	'== input parms:             object$:	descriptor of the html object to click
	'==							step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                 int: 	0 - on success	  
	'==									error_code - on failure
	'==
	'== notes:                   none
	'==
'=============================================================================================================================================================*/
function webClickElement(object$, step$)
	local r

	r = clickhtmlelement(object$)

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error " + step$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_" + step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + step$, crlf + crlf)
		closebrowser()
		webClickElement = r
	endif

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " was successful", crlf)
		webClickElement = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:           webSelectItem
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 selects specified item from the specified html combobox/dropdown or other multi-value object with error-handling/logging
	'==
	'== input parms:             object$:	descriptor of the html object
	'==							item$:		the item/value to select
	'==							step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                 int:	0 - on success
	'==									error_code - on failure
	'==
	'== notes:                   none
	'==
'=============================================================================================================================================================*/

function webSelectItem(object$, item$, step$)
	local r

	r = selecthtmlitem(object$, item$)

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error " + step$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-sel_" + step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + step$, crlf + crlf)
		closebrowser()
		webSelectItem = r
	endif

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " was successful", crlf)
		webSelectItem = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:           webLeftSingleClickOCRText
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 conducts a left button single click on the specified text found in the location (area) specified
	'==
	'== input parms:            	text$:		the text to look for
	'==							area1:		x coordinate to the topleft point of the area to look in
	'==							area2:		y coordinate to the topleft point of the area to look in
	'==							area3:		height of the area to look in
	'==							area4:		width of the area to look in
	'==							offset1:	x coordinate specifying an offset distance from the middl#End Region
	'==							offset2:	y coordinate specifying an offset distance from the middl#End Region
	'==							step$:		terse description of the action/step in the script (e.g. "clicking login")
	'==
	'== returns:                 int:	0 - on success
	'==									error_code - on failure
	'==
	'== notes:                   none
	'==
'=============================================================================================================================================================*/
function webLeftSingleClickOCRText(text$, area1, area2, area3, area4, offset1, offset2, step$)
	local r

	res = useocrengine(3)

	r = clickontextocr(text$, left, single, inarea(area1, area2, area3, area4), offset1, offset2)

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error " + step$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + step$, crlf + crlf)
		closebrowser()
		webLeftSingleClickOCRText = r
	endif

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " was successful", crlf)
		webLeftSingleClickOCRText = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:           webNavigate
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 the wintask navigate function wrapped with error-handling/logging
	'==
	'== input parms:            	url$:		the url of the page to navigate to
	'==							page$:		name of the page for logging purposes
	'==
	'== returns:                 typeValue
	'==
	'== notes:                   pertinentinfo
	'==
'=============================================================================================================================================================*/
function webNavigate(url$, page$)
	local r

	r = navigate(url$)
	
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error navigating to [" + page$ + "] page", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-nav_to_" + page$ + ".bmp", 1, 1)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - navigating to " + page$, crlf + crlf)
		closebrowser()
		webNavigate = r
		exitfunction
	endif

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": navigated to " + page$ + " page", crlf)
		webNavigate = 0
		exitfunction
	endif

endfunction
