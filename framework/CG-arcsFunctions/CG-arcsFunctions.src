'###############################################################################################################################################################
'##  filename:              cg-arcsFunctions
'##
'##  purpose:               library of functions for use in arcs workflow script development in order to minimize code duplication, increase script
'##                         cleanliness/readability, and reduce maintenance efforts by providing a single centralized location for changes
'##
'###############################################################################################################################################################
'===============================================================================================================================================================
'== function name:              arcsSubAppStageChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                checks the stage column of current row for triggering values
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success/match
    '==                                 1 - failure/no match
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function arcsSubAppStageChk()

    if curr_stage$ = "2nd Interview" or curr_stage$ = "2nd Interview Rescheduled" or curr_stage$ = "On-board" then
        arcsSubAppStageChk = 0
        exitfunction
    else
        arcsSubAppStageChk = 1
    endif

endfunction

'===============================================================================================================================================================
'== function name:              arcsSubAppStatusChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                checks background check column of current row for triggering value(s)
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success/match
    '==                                 1 - failure/no match
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function arcsSubAppStatusChk()

    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking bg chk column for trigger value", crlf)

    if instr(backGroundChk$, "Needs Reviewed") <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": column status [" + backGroundChk$ + "] indicates application can be submitted", crlf)
        arcsSubAppStatusChk = 0
        exitfunction
    endif

    if instr(backGroundChk$, "Needs Reviewed") = 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": column status [" + backGroundChk$ + "] indicates application is not ready for submission", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ":  app not ready for submission; proceeding to next change event", crlf + crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: bg check column did not match trigger status", crlf + crlf)
        arcsSubAppStatusChk = 1
        exitfunction
    endif
endfunction

'===============================================================================================================================================================
'== function name:              arcsSubAppReqDataChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                ensures there are values for all arcs required data fields
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function arcsSubAppReqDataChk()

    if applicantFName$ = "" or applicantFName$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [first name]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [fname]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantLName$ = "" or applicantLName$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [last name]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [lname]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantSSN$ = "" or applicantSSN$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [ssn]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [ssn]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantBDay$ = "" or applicantBDay$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [dob]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [bday]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantAddr1$ = "" or applicantAddr1$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [address line 1]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [addr1]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantCity$ = "" or applicantCity$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [city]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [city]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantState$ = "" or applicantState$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [state]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [state]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif
    if applicantZip$ = "" or applicantZip$ = "[]" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": employment inquiry list did not include required [zip]", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": required data missing; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: missing required data [zip]", crlf + crlf)
        arcsSubAppReqDataChk = 1
        exitfunction
    endif

    arcsSubAppReqDataChk = 0

endfunction

'===============================================================================================================================================================
'== function name:              arcsSubAppAcceptUsrAgree
    '==
    '== developer:              todd busch
    '==
    '== purpose:                checks to see if the user agreement page was presented at login and accepts if so
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function arcsSubAppAcceptUsrAgree()
    local r, res

    r = existhtmlelement(chkArcsAccepted$)
    if r = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": end user agreement was presented", crlf)
        res = clickhtmlelement (chkArcsAccepted$)
        res = clickhtmlelement (btnArcsSubmit$)
        '------- error handling
        if res <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error accepting end user agreement; error_code: (" + str$(res) + ") msg: " + #errormsg$, crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-accept_end_user_agreement.bmp", 1, 1)
            closebrowser()
            arcsSubAppAcceptUsrAgree = 1
            exitfunction
        endif
        '------- validation
        pause 10 secs until
            text("Welcome")
            inwindow(wndArcsHomePage$, 1)
        pausefalse
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": accept end user agreement validation failed", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected text (welcome) was not found on page", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-accept_end_user_agreement.bmp", 1, 1)
            closebrowser()
            arcsSubAppAcceptUsrAgree = 1
            exitfunction
        endpause
        '------- debug logging
        if res = 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": end user agreement accepted", crlf)
            arcsSubAppAcceptUsrAgree = 0
            exitfunction
        endif
    endif

    if r = 0 then
        arcsSubAppAcceptUsrAgree = 0
        exitfunction
    endif

endfunction

'=============================================================================================================================================================
'== function name:              arcsSubAppExistAppChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                detrmines if there is an existing application for the current applicant
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - applicant is new
    '==                                 1 - applicant has existing application
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function arcsSubAppExistAppChk()

    if existhtmlelement(btnArcsCaseNotes$) = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant already exists in the ARCS database", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": existing applicant; proceeding to next change event", crlf + crlf)
        arcsSubAppExistAppChk = 1
        exitfunction
    else
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant search returned no results", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": proceeding with workflow", crlf)
        arcsSubAppExistAppChk = 0
        exitfunction
   endif

endfunction

'=============================================================================================================================================================
'== function name:              arcsInitRegistryChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                terseDescription
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
' function arcsInitRegistryChk()
'     local r, val$

'     r = gethtmledittext(selArcsResultsMedicaid$, val$)

'     if r <> 0 then
' 		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error getting text from object", crlf)
' 		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
' 		arcsInitRegistryChk$ = "1"
' 		exitfunction
'     endif

'     if val$ <> "2" then
'         write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Ohio Medicaid Provider Exclusion List was not cleared", crlf)
'     MsgBox(val$)
    
' endfunction