'#############################################################################################################################################################
'##  filename:				cg-globalFunctions
'##
'##  purpose:				library of general functions for use in caregiver workflow script development in order to minimize code duplication, increase
'##							script cleanliness/readability, and reduce maintenance efforts by providing a single centralized location for changes
'##
'#############################################################################################################################################################

'=============================================================================================================================================================
'== function name:           	zeroPadDate$
	'==
	'== developer:              todd busch
	'==
	'== purpose:                adds a leading zero to single digit day and month parts of a short formatted date (m/d/yyyy)
	'==
	'== input parms:            dt_date$:	date to be formatted (must be in short format)
	'==
	'== returns:                string:	the converted date with leading zeros
	'==
	'== notes:                  n/a
	'==
'=============================================================================================================================================================
function zeroPadDate$(dt_date$)
	local r, dt_date$, dtDay$, dtYr$, dtMo$

	'-------------------- parse date into parts
	'get day part
	dtDay$ = left$(dt_date$, 2)

	'get year part
	dtYr$ = right$(dt_date$, 4)

	'get month part
	r = instr(dt_date$, "/")
	dtMo$ = mid$(dt_date$, r + 1, 2)

	'add leading zero to day if single digit
	if instr(dtDay$, "/") <> 0 then
		dtDay$ = "0" + left$(dtDay$, 1)
	endif
	
	'add leading zero to day if single digit
	if instr(dtMo$, "/") <> 0 then
		dtMo$ = "0" + left$(dtMo$, 1)
	endif

	'reassmble date parts
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": reformatted date: [" + dtDay$ + "/" + dtMo$ + "/" + dtYr$ + "]", crlf)
	zeroPadDate$ = dtDay$ + "/" + dtMo$ + "/" + dtYr$

endfunction

'=============================================================================================================================================================
'== function name:           	formatSSN$
	'==
	'== developer:              todd busch
	'==
	'== purpose:                makes sure ssn is formatted with two dashes as the global standard
	'==
	'== input parms:            str_ssn$:	the ssn to be formatted
	'==
	'== returns:                string:		the formatted ssn with dashes
	'==
	'== notes:                  n/a
	'==
'=============================================================================================================================================================
function formatSSN$(str_ssn$)
    local str_ssn$, sMiddle$, sPre$, sPost$, sRaw$, sFormatted$

	'strip string down to just numbers
	sRaw$ = replace$(str_ssn$, "-", "")
	sRaw$ = replace$(sRaw$, "+", "")
	sRaw$ = replace$(sRaw$, "/", "")
	sRaw$ = replace$(sRaw$, "/", "")
	sRaw$ = replace$(sRaw$, " ", "")

	'divide # into parts
	sPre$ = left$(sRaw$, 3)
	sMiddle$ = mid$(sRaw$, 4, 2)
	sPost$ = right$(sRaw$, 4)

	'assemble string
	sFormatted$ = sPre$ + "-" + sMiddle$ + "-" + sPost$
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": formatted ssn: [" + sFormatted$ + "]", crlf)
	formatSSN$ = sFormatted$

endfunction

'=============================================================================================================================================================
'== function name:           	nullDataElementChk
	'==
	'== developer:              todd busch
	'==
	'== purpose:                checks specified data element for a null value
	'==
	'== returns:                int:	0 - not null
	'==									1 - null value
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function nullDataElementChk(str_object$)
	local str_object$

	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": call to nullDataElementCheck()", crlf)
	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking: [" + str_object$ + "] for a value", crlf)

	if str_object$ = "" or str_object$ = "[]" then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": [" + str_object$ + "] did not contain a value for the current row", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": nullDataElementChk: null value: [" + str_object$ + "]", crlf + crlf)
		nullDataElementChk = 1
		exitfunction
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": value was found for specified data element", crlf)
		nullDataElementChk = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:				formatPhoneDashes
	'==
	'== developer:              todd busch
	'==
	'== purpose:                terseDescription
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - success
	'==									1 - failure
	'==
	'== notes:                  none
	'==
'===============================================================================================================================================================
function formatPhoneDashes$(str_phone$)
	local r, str_phone$

	'check for sycronist formatted phone
	r = instr(str_phone$, "[tel:")
	if r <> 0 then
		str_phone$ = left$(str_phone$, r - 1)
	endif

	'remove parentheses around area code
	r = instr(str_phone$, ")")
	if r <> 0 then
		str_phone$ = replace$(str_phone$, "(", "")
		str_phone$ = replace$(str_phone$, ")", "")

		'replace space created by removal of leading parenthases
		str_phone$ = replace$(str_phone$, " ", "-")
	endif

	'check if contains no dashes
	r = instr(str_phone$, "-")
	if r = 0 then
		iPart1$ = left$(str_phone$, 3)
		iPart2$ = mid$(str_phone$, 4, 3)
		iPart3$ = right$(str_phone$, 4)
		str_phone$ = iPart1$ + "-" + iPart2$ + "-" + iPart3$
	endif


	formatPhoneDashes$ = str_phone$


endfunction

'=============================================================================================================================================================
'== function name:				copyFile
	'==
	'== developer:              todd busch
	'==
	'== purpose:                terseDescription
	'==
	'== input parms:            none
	'==
	'== returns:                int:	0 - success
	'==									1 - failure
	'==
	'== notes:                  none
	'==
'===============================================================================================================================================================
function copyFile(str_from$, str_to$)
	local r

	r = filecopy(str_from$, str_to$, forced)

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": file copy failed", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: file copy failed" + step$, crlf + crlf)
		copyFile = 1
		exitfunction
	endif

	if r = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": file copied successfully", crlf)
		copyFile = 0
		exitfunction
	endif
	 
endfunction

'=============================================================================================================================================================
'== function name:              fmtDateTimeToDate$
    '==
    '== developer:              todd busch
    '==
    '== purpose:                terseDescription
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function fmtDateTimeToDate$(dtDate$)
    local r, p, dtDateOnly$, dtMonth$, dtDay$, dtYr$

    '-------------------- dissect date
    '------- month
    'original format 1/20/2023  10:30:00 AM
    r = instrrev(dtDate$, "/")							'find second "/" in string                                 
    r = r + 4											'add 4 for year to find end of date                         
    dtDateOnly$ = left$(dtDate$, r)						'extract just date                                          
    dtDateOnly$ = rtrim$(dtDateOnly$)					'trim whitespace caused by single digit month/day values    
    dtMonth$ = left$(dtDate$, 2)			        	'extract just month                                         
    if instr(dtMonth$,"/") <> 0 then					'zero pad if single digit                                  
        dtMonth$ = left$(dtMonth$, 1) 
        dtMonth$ = "0" + dtMonth$
    endif

    '------- day
    p = instr(dtDate$, "/")					            'find starting point to extract day
    dtDay$ = mid$(dtDate$, p + 1, 2)		        	'extract just day
    if instr(dtDay$,"/") <> 0 then						'zero pad if single digit
        dtDay$ = left$(dtDay$, 1) 
        dtDay$ = "0" + dtDay$
    endif

    '------- year
	dtYr$ = right$(dtDateOnly$, 4)						'extract just year

    dtFormattedDate$ = dtMonth$ + "/" + dtDay$ + "/" + dtYr$
    fmtDateTimeToDate$ = dtMonth$ + "/" + dtDay$ + "/" + dtYr$

endfunction


'=============================================================================================================================================================
'== function name:           	convStateToName$
	'==
	'== developer:              todd busch
	'==
	'== purpose:                converts the specified state value from whatever the current form is to the capitalized name
	'==
	'== input parms:            str_state$:		the state value to convert
	'==
	'== returns:                str:			the capitalized state name (e.g. Ohio)
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function convStateToName$(str_state$)
	local str_state$

	'-------------------- ohio
	if str_state$ = "OH" then
		convStateToName$ = "Ohio"
		exitfunction
	endif
	if str_state$ = "Oh" then
		convStateToName$ = "Ohio"
		exitfunction
	endif
	if str_state$ = "oh" then
		convStateToName$ = "Ohio"
		exitfunction
	endif
	if str_state$ = "Ohio" then
		convStateToName$ = "Ohio"
		exitfunction
	endif
	if str_state$ = "ohio" then
		convStateToName$ = "Ohio"
		exitfunction
	endif
	if str_state$ = "OHIO" then
		convStateToName$ = "Ohio"
		exitfunction
	endif

	'-------------------- tennessee
	if str_state$ = "TN" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif
	if str_state$ = "Tn" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif
	if str_state$ = "tn" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif
	if str_state$ = "Tennessee" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif
	if str_state$ = "tennessee" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif
	if str_state$ = "TENNESSEE" then
		convStateToCode$ = "Tennessee"
		exitfunction
	endif

	'-------------------- Washington
	if str_state$ = "WA" then
		convStateToName$ = "Washington"
		exitfunction
	endif
	if str_state$ = "Wa" then
		convStateToName$ = "Washington"
		exitfunction
	endif
	if str_state$ = "wa" then
		convStateToName$ = "Washington"
		exitfunction
	endif
	if str_state$ = "Washington" then
		convStateToName$ = "Washington"
		exitfunction
	endif
	if str_state$ = "washington" then
		convStateToName$ = "Washington"
		exitfunction
	endif
	if str_state$ = "WASHINGTON" then
		convStateToName$ = "Washington"
		exitfunction
	endif

	'-------------------- Pennsylvania
	if str_state$ = "PA" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif
	if str_state$ = "Pa" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif
	if str_state$ = "pa" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif
	if str_state$ = "Pennsylvania" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif
	if str_state$ = "pennsylvania" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif
	if str_state$ = "PENNSYLVANIA" then
		convStateToName$ = "Pennsylvania"
		exitfunction
	endif

	'-------------------- Indiana
	if str_state$ = "IN" then
		convStateToName$ = "Indiana"
		exitfunction
	endif
	if str_state$ = "In" then
		convStateToName$ = "Indiana"
		exitfunction
	endif
	if str_state$ = "in" then
		convStateToName$ = "Indiana"
		exitfunction
	endif
	if str_state$ = "Indiana" then
		convStateToName$ = "Indiana"
		exitfunction
	endif
	if str_state$ = "indiana" then
		convStateToName$ = "Indiana"
		exitfunction
	endif
	if str_state$ = "INDIANA" then
		convStateToName$ = "Indiana"
		exitfunction
	endif

endfunction

'=============================================================================================================================================================
'== function name:				convStateToCode$
	'==
	'== developer:              todd busch
	'==
	'== purpose:                converts the specified state value from whatever the current form is to the all caps state code
	'==
	'== input parms:            str_state$:		the state value to convert
	'==
	'== returns:                str:			the all caps state code (e.g. OH)
	'==
	'== notes:                  none
	'==
'=============================================================================================================================================================
function convStateToCode$(str_state$)
	local str_state$
	
	'-------------------- ohio
	if str_state$ = "OH" then
		convStateToCode$ = "OH"
		exitfunction
	endif
	if str_state$ = "Oh" then
		convStateToCode$ = "OH"
		exitfunction
	endif
	if str_state$ = "oh" then
		convStateToCode$ = "OH"
		exitfunction
	endif
	if str_state$ = "Ohio" then
		convStateToCode$ = "OH"
		exitfunction
	endif
	if str_state$ = "ohio" then
		convStateToCode$ = "OH"
		exitfunction
	endif
	if str_state$ = "OHIO" then
		convStateToCode$ = "OH"
		exitfunction
	endif

	'-------------------- tennessee
	if str_state$ = "TN" then
		convStateToCode$ = "TN"
		exitfunction
	endif
	if str_state$ = "Tn" then
		convStateToCode$ = "TN"
		exitfunction
	endif
	if str_state$ = "tn" then
		convStateToCode$ = "TN"
		exitfunction
	endif
	if str_state$ = "Tennessee" then
		convStateToCode$ = "TN"
		exitfunction
	endif
	if str_state$ = "tennessee" then
		convStateToCode$ = "TN"
		exitfunction
	endif
	if str_state$ = "TENNESSEE" then
		convStateToCode$ = "TN"
		exitfunction
	endif

	'-------------------- Washington
	if str_state$ = "WA" then
		convStateToName$ = "WA"
		exitfunction
	endif
	if str_state$ = "Wa" then
		convStateToName$ = "WA"
		exitfunction
	endif
	if str_state$ = "wa" then
		convStateToName$ = "WA"
		exitfunction
	endif
	if str_state$ = "Washington" then
		convStateToName$ = "WA"
		exitfunction
	endif
	if str_state$ = "washington" then
		convStateToName$ = "WA"
		exitfunction
	endif
	if str_state$ = "WASHINGTON" then
		convStateToName$ = "WA"
		exitfunction
	endif

	'-------------------- Pennsylvania
	if str_state$ = "PA" then
		convStateToName$ = "PA"
		exitfunction
	endif
	if str_state$ = "Pa" then
		convStateToName$ = "PA"
		exitfunction
	endif
	if str_state$ = "pa" then
		convStateToName$ = "PA"
		exitfunction
	endif
	if str_state$ = "Pennsylvania" then
		convStateToName$ = "PA"
		exitfunction
	endif
	if str_state$ = "pennsylvania" then
		convStateToName$ = "PA"
		exitfunction
	endif
	if str_state$ = "PENNSYLVANIA" then
		convStateToName$ = "PA"
		exitfunction
	endif

	'-------------------- Indiana
	if str_state$ = "IN" then
		convStateToName$ = "IN"
		exitfunction
	endif
	if str_state$ = "In" then
		convStateToName$ = "IN"
		exitfunction
	endif
	if str_state$ = "in" then
		convStateToName$ = "IN"
		exitfunction
	endif
	if str_state$ = "Indiana" then
		convStateToName$ = "IN"
		exitfunction
	endif
	if str_state$ = "indiana" then
		convStateToName$ = "IN"
		exitfunction
	endif
	if str_state$ = "INDIANA" then
		convStateToName$ = "IN"
		exitfunction
	endif

endfunction

