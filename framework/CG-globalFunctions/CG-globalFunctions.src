/*#############################################################################################################################################################
##  filename:						cg-globalFunctions
##
##  purpose:						library of general functions for use in caregiver workflow script development in order to minimize code
##									duplication, increase script cleanliness/readability, and reduce maintenance efforts by providing a single
##									centralized location for changes
##
##  contents:						invokeBrowser, zeroPadDate$, formatSSN$, checkForNullSSN, loadEmploymentInquiryRows
##
#############################################################################################################################################################*/

'=============================================================================================================================================================
'== function name:           invokeBrowser
'==
'== developer:               todd busch
'==
'== purpose:                 attempts to start the specified browser and load the specified url. if an error is encountered it will retry the number of
'==                          of times defined in iRetry (default: 3). if number of retry attempts defined is exceeded it will log messages, close the
'==                          the browser, and return the error code
'==
'== input parms:             str_app$:   browser code to invoke ("CH" = Chrome  "FF" = FireFox)
'==                          str_url$:   url to navigate to on browser invoke
'==
'== returns:                 int:	0 - success		error_code - on failure
'==
'== notes:                   n/a
'==
'=============================================================================================================================================================

function invokeBrowser(str_app$, str_url$)
	local iRetry, r, iAttempt

	while iRetry <= 2
		r = startbrowser(str_app$, str_url$, 3)
		pause 3
		iAttempt = iRetry + 1

		if r = 0 then
			iRetry = 3
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": start browser was successful", crlf)
			invokeBrowser = 0
		endif

		if r <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error starting browser on attempt #: [" + str$(iAttempt) + "]", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "), retrying", crlf)
			hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-invoke_browser-" + str$(iAttempt) + ".bmp", 1, 1)
			closebrowser()
			pause 1
			iRetry = iRetry + 1
		endif
	wend

	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": browser could not be invoked after [" + str$(iAttempt) + "] attempts", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		closebrowser()
		invokeBrowser = r
	endif

EndFunction


/*=============================================================================================================================================================
== function name:           zeroPadDate$
==
== developer:               todd busch
==
== purpose:                 adds a leading zero to single digit day and month parts of a short formatted date (m/d/yyyy)
==
== input parms:             dt_date$:	date to be formatted
==
== returns:                 string:		the converted date with leading zeros
==
== notes:                   n/a
==
=============================================================================================================================================================*/
function zeroPadDate$(dt_date$)
	local r

	'-------------------- parse date into parts
	'get day part
	dtDay$ = left$(dt_date$, 2)

	'get year part
	dtYr$ = right$(dt_date$, 4)

	'get month part
	r = instr(dt_date$, "/")
	dtMo$ = mid$(dt_date$, r + 1, 2)

	'add leading zero to day if single digit
	if instr(dtDay$, "/") <> 0 then
		dtDay$ = "0" + left$(dtDay$, 1)
	endif
	
	'add leading zero to day if single digit
	if instr(dtMo$, "/") <> 0 then
		dtMo$ = "0" + left$(dtMo$, 1)
	endif

	'reassmble date parts
	zeroPadDate$ = dtDay$ + "/" + dtMo$ + "/" + dtYr$

endfunction


/*=============================================================================================================================================================
== function name:           formatSSN$
==
== developer:               todd busch
==
== purpose:                 adds dashes to specified ssn if it does not have them
==
== input parms:            	str_ssn$:	the ssn to be formatted
==
== returns:                 string:		the formatted ssn with dashes
==
== notes:                   n/a
==
=============================================================================================================================================================*/
function formatSSN$ (str_ssn$)
     local middle$, pre$, post$
   
    if instr(str_ssn$, "-")  = 0 then
        'divide # into parts
        pre$ = left$(applicantSSN$, 3)
        middle$ = mid$(applicantSSN$, 4, 2)
        post$ = right$(applicantSSN$, 4)

        'assemble string    
        formatSSN$ = pre$ + "-" + middle$ + "-" + post$

    else
        formatSSN$ = str_ssn$
    endif

endfunction


/*=============================================================================================================================================================
== function name:           checkForNullSSN
==
== developer:               todd busch
==
== purpose:                 checks value from employment inquiry sn column for blank value
==
== returns:                 int:	0 - contained ssn	  1 - ssn was null
==
== notes:                   none
==
=============================================================================================================================================================*/
function checkForNullSSN()

	if applicantSSN$ = "" then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn col did not contain a social for the current applicant", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - no ssn", crlf + crlf)
		checkForNullSSN = 1
	else
		checkForNullSSN = 0
	endif

endfunction


/*=============================================================================================================================================================
== function name:           loadEmploymentInquiryRows
==
== developer:               todd busch
==
== purpose:                 loads data needed from employment inquiry spreadsheet into arrays
==
== returns:                 int:	0 - if all items read successfully	  1 - if any item fails
==
== notes:                   pertinentinfo
==
=============================================================================================================================================================*/

function loadEmploymentInquiryRows()
	local r

	'-------------------- record id
	cnt = readexcel (employmentInquiryPath$, employmentInquiryIdCol$, arrApplicantID$())
	if instr(str$(cnt), "-") <> 0 then				'look for dash which would indicate an error code
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading ID column.  error_code: " +   str$(cnt), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (id column)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": (" + str$(cnt) + ") rows read into array.", crlf)
	endif
	'-------------------- applicant first name
	r = readexcel (employmentInquiryPath$, employmentInquiryFNameCol$, arrApplicantFName$())	
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading first name column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (applicant first name)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- applicant last name
	r = readexcel (employmentInquiryPath$, employmentInquiryLNameCol$, arrApplicantLName$())	
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading last name column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (applicant last name)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- applicant email
	r = readexcel (employmentInquiryPath$, employmentInquiryEmailCol$, arrApplicantEmail$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading email column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (applicant email)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- stage
	r = readexcel (employmentInquiryPath$, employmentInquiryStageCol$, arrCurrentStage$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading stage column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (stage)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- change events
	r = readexcel (employmentInquiryPath$, employmentInquiryChangeEventCol$, arrChangeEvents$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading change events column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (change events)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- adobe packet status
	r = readexcel (employmentInquiryPath$, employmentInquiryAdobeCol$, arrAdobePcktStatus$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading adobe packet status column.  error_code: (" + str$(r) + ")", crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (adobe packet status)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- gms status
	r = readexcel (employmentInquiryPath$, employmentInquiryGMSCol$, arrGMSStatus$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading gms status column.  error_code: " +   str$(r), crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (gms status)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- ssn
	r = readexcel (employmentInquiryPath$, employmentInquirySSNCol$, arrApplicantSSN$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading ssn column.  error_code: (" + str$(cnt) + ")", crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (ssn)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- phone
	r = readexcel (employmentInquiryPath$, employmentInquiryPhoneCol$, arrApplicantPhone$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading phone column.  error_code: (" + str$(r) + ")", crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (phone)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- 1st interview appointment
	r = readexcel (employmentInquiryPath$, employmentInquiry1stAppCol$, arrApplicant1stApp$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading 1st interview appointment column.  error_code: (" + str$(r) + ")", crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (1st interview appointment)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif
	'-------------------- text messages
	r = readexcel (employmentInquiryPath$, employmentInquiryTextmsgCol$, arrTextmsgStatus$())
	if instr(str$(r), "-") <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error reading text messages column.  error_code: (" + str$(r) + ")", crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": scan failed reading in data (text messages)", crlf)
		loadEmploymentInquiryRows = 1
		exitfunction
	endif

	loadEmploymentInquiryRows = 0

endfunction
