'##############################################################################################################################################################
'##  filename:						global functions																										 
'##																																							 
'##  purpose:						comprises a library of functions to be used in caregiver workflow script development with the intent and goal to
'##									minimize code duplication, increase script cleanliness and readability, as well as reduce maintenance efforts
'##																																							 
'##  contents:						zeroPadDate$, formatSSN$, gmsErrorCheck$, gmsNoRehireCheck, checkForNullSSN
'##																																							 
'##############################################################################################################################################################

/*=============================================================================================================================================================
== function name:           zeroPadDate$
==
== developer:               todd busch
==
== purpose:                 adds a leading zero to single digit day and month parts of a short formatted date (m/d/yyyy)
==
== returns:                 string:		the converted date with leading zeros
==
== notes:                   n/a
==
=============================================================================================================================================================*/
function zeroPadDate$(dt_date$)
	local r

	'-------------------- parse date into parts
	'get day part
	dtDay$ = left$(dt_date$, 2)

	'get year part
	dtYr$ = right$(dt_date$, 4)

	'get month part
	r = instr(dt_date$, "/")
	dtMo$ = mid$(dt_date$, r + 1, 2)

	'add leading zero to day if single digit
	if instr(dtDay$, "/") <> 0 then
		dtDay$ = "0" + left$(dtDay$, 1)
	endif
	
	'add leading zero to day if single digit
	if instr(dtMo$, "/") <> 0 then
		dtMo$ = "0" + left$(dtMo$, 1)
	endif

	'reassmble date parts
	zeroPadDate$ = dtDay$ + "/" + dtMo$ + "/" + dtYr$

endfunction


/*=============================================================================================================================================================
== function name:           formatSSN$
==
== developer:               todd busch
==
== purpose:                 adds dashes to specified ssn if it does not have them
==
== input parms:            	str_ssn$:	the ssn to be formatted
==
== returns:                 string:		the converted ssn with leading dashes
==
== notes:                   n/a
==
=============================================================================================================================================================*/
function formatSSN$ (str_ssn$)
     local middle$, pre$, post$
   
    if instr(str_ssn$, "-")  = 0 then
        'divide # into parts
        pre$ = left$(applicantSSN$, 3)
        middle$ = mid$(applicantSSN$, 4, 2)
        post$ = right$(applicantSSN$, 4)

        'assemble string    
        formatSSN$ = pre$ + "-" + middle$ + "-" + post$

    else
        formatSSN$ = str_ssn$
    endif

endfunction


/*=============================================================================================================================================================
== function name:           gmsErrorCheck$
==
== developer:               todd busch
==
== purpose:                 handle gms errors displayed in popup dialogbox when entering form data on new hire page
==
== input parms:            	none
==
== returns:                 string - one of canned msgs for known errors or the parsed error text for unknown errors or no error "found"
==
== notes:                   dialogbox cannot be seen by wintask at all. capturing ocr in area where it pops up and analyzes text found if any to determine
==							what/if any error occurred
==
=============================================================================================================================================================*/
function gmsErrorCheck$()
	local r

	'get focus off textfield to prompt popup if error
	usewindow("FIREFOX.EXE|MozillaWindowClass|Group Management Services - New Hire — Mozilla Firefox", 1)
	clickmouse(left, down, 950, 250, absolute)
	clickmouse(left, up, 950, 250, absolute)
	pause 2

	r = useocrengine(3)

	'return error if ocrengine fails
	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ocrengine failed trying to capture error popup", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
		gmsErrorCheck$ = "0"
		exitfunction
	endif

	'capture area error popup is typically displayed in
	err$ = captureareaocr$("FIREFOX.EXE|MozillaWindowClass|Group Management Services - New Hire — Mozilla Firefox", topinstance(), 739, 467, 191, 442)

	'check for captured error msg
	if instr(err$, "gmsprismhicom") <> 0 then
		
		'handle dup ssn error for previous employee
		if instr(err$, "belongs to") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to a previous employee; proceeding to rehire form", crlf)
			gmsErrorCheck$ = "rehire"
			exitfunction
		endif

		'look for & return dup ssn error - onboarding
		if instr(err$, "onboarding") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to applicant in onboarding", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
			write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to applicant in onboarding; proceeding to next change event", crlf + crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsErrorCheck - applicant in onboarding", crlf + crlf)
			gmsErrorCheck$ = "1"
			closebrowser()
			exitfunction
		endif

		'look for & return invalid char error
		if instr(err$, "Invalid characters found") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": invalid character error", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
			write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsErrorCheck - invalid character", crlf + crlf)
			gmsErrorCheck$ = "1"
			closebrowser()
			exitfunction
		endif

		'catch all for unknown errors
		err$ = mid$(err$, 18, 200)		'trim var to just msg text
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": an unknown error occurred", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + err$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsErrorCheck - " + err$, crlf + crlf)
		closebrowser()
		gmsErrorCheck$ = "1"
		exitfunction

	endif


endfunction


/*=============================================================================================================================================================
== function name:           gmsNoRehireCheck
==
== developer:               todd busch
==
== purpose:                 checks for popup indicating an applicant had previsouly been set to "no-rehire"
==
== input parms:            	none
==
== returns:                 int - (0) if warning not found; (1) if warning was found
==
== notes:                   pertinentinfo
==
=============================================================================================================================================================*/
function gmsNoRehireCheck$()

	ret = useocrengine(3)

	'return error if ocrengine fails
	if r <> 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ocrengine failed trying to capture error popup", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
		gmsNoRehireCheck$ = "0"
		exitfunction
	endif

	'capture ocr in area where popup is typically displayed
	err$ = captureareaocr$("FIREFOX.EXE|MozillaWindowClass|Group Management Services - Rehire — Mozilla Firefox", topinstance(), 731, 459, 244, 502)

	'exit function if no error popup found
	if instr(err$, "gmsprismhicom") = 0 then
		gmsNoRehireCheck$ = "0"
		exitfunction
	endif

	'if popup error is found...
	if instr(err$, "gmsprismhicom") <> 0 then

		'return msg for no-rehire designation
		if instr(err$, "No-Rehire") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant was set to 'no-rehire'", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": dismissing warning and continuing to submit rehire", crlf)
			usewindow(wndRehireForm$, 1)
			sendkeys("<enter>", noactivate)
			gmsNoRehireCheck$ = "0"
			exitfunction
		endif

		'return msg for employed status 'a'
		if instr(err$, "You may not perform a Rehire on an employee with a status of") <> 0 then
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn belongs to current employee with status 'A'", crlf)
			write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
			write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
			write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - status 'a' employee", crlf + crlf)
			closebrowser()
			gmsNoRehireCheck$ = "1"
			exitfunction
		endif

		'catch all for unknown errors
		err$ = mid$(err$, 18, 200)		'trim var to just msg text
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": an unknown error occurred", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + err$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: gmsNoRehireCheck - " + err$, crlf + crlf)
		closebrowser()
		gmsErrorCheck$ = "1"
		exitfunction

	endif

endfunction



function checkForNullSSN()

	if applicantSSN$ = "" then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ssn col did not contain a social for the current applicant", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - no ssn", crlf + crlf)
		checkForNullSSN = 1
	else
		checkForNullSSN = 0
	endif

endfunction


function checkGMSStatus()

	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking gms status", crlf)
	if instr(gmsStatus$, "New Hire Invited") = 0 then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms entry", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status of column: (" + gmsStatus$ + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status not set for gms entry; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": SSN: " + applicantSSN$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: status not set for gms entry", crlf + crlf)
		checkGMSStatus = 1
	else
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant set for gms entry", crlf)
		checkGMSStatus = 0
	endif

endfunction