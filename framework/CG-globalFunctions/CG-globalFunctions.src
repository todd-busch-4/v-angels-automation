/*#############################################################################################################################################################
##  filename:						cg-globalFunctions
##
##  purpose:						library of general functions for use in caregiver workflow script development in order to minimize code
##									duplication, increase script cleanliness/readability, and reduce maintenance efforts by providing a single
##									centralized location for changes
##
##  contents:						zeroPadDate$, formatSSN$, checkForNullSSN, loadEmploymentInquiryRows, convertStateFromCode$
##
#############################################################################################################################################################*/

'=============================================================================================================================================================
'== function name:           zeroPadDate$
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 adds a leading zero to single digit day and month parts of a short formatted date (m/d/yyyy)
	'==
	'== input parms:             dt_date$:	date to be formatted
	'==
	'== returns:                 string:		the converted date with leading zeros
	'==
	'== notes:                   n/a
	'==
'=============================================================================================================================================================*/
function zeroPadDate$(dt_date$)
	local r

	'-------------------- parse date into parts
	'get day part
	dtDay$ = left$(dt_date$, 2)

	'get year part
	dtYr$ = right$(dt_date$, 4)

	'get month part
	r = instr(dt_date$, "/")
	dtMo$ = mid$(dt_date$, r + 1, 2)

	'add leading zero to day if single digit
	if instr(dtDay$, "/") <> 0 then
		dtDay$ = "0" + left$(dtDay$, 1)
	endif
	
	'add leading zero to day if single digit
	if instr(dtMo$, "/") <> 0 then
		dtMo$ = "0" + left$(dtMo$, 1)
	endif

	'reassmble date parts
	zeroPadDate$ = dtDay$ + "/" + dtMo$ + "/" + dtYr$

endfunction

'=============================================================================================================================================================
'== function name:           formatSSN$
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 adds dashes to specified ssn if it does not have them
	'==
	'== input parms:            	str_ssn$:	the ssn to be formatted
	'==
	'== returns:                 string:		the formatted ssn with dashes
	'==
	'== notes:                   n/a
	'==
'=============================================================================================================================================================*/
function formatSSN$ (str_ssn$)
     local middle$, pre$, post$
   
    if instr(str_ssn$, "-")  = 0 then
        'divide # into parts
        pre$ = left$(applicantSSN$, 3)
        middle$ = mid$(applicantSSN$, 4, 2)
        post$ = right$(applicantSSN$, 4)

        'assemble string    
        formatSSN$ = pre$ + "-" + middle$ + "-" + post$

    else
        formatSSN$ = str_ssn$
    endif

endfunction

'=============================================================================================================================================================
'== function name:           chkNullDataElement
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 checks value from employment inquiry ssn column for blank value
	'==
	'== returns:                 int:	0 - contained ssn
	'==									1 - ssn was null
	'==
	'== notes:                   none
	'==
'=============================================================================================================================================================*/
function chkNullDataElement(element$)

	if element$ = "" or element$ = "[]"then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + element$ + " col did not contain a value for the current row", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - null " + element$, crlf + crlf)
		checkForNullSSN = 1
	else
		checkForNullSSN = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:           convertStateFromCode$
	'==
	'== developer:               todd busch
	'==
	'== purpose:                 terseDescription
	'==
	'== input parms:            	paramName:	purpose
	'==
	'== returns:                 typeValue
	'==
	'== notes:                   pertinentinfo
	'==
'=============================================================================================================================================================*/
function convertStateFromCode$(state$)

	if state$ = "OH" then
		convertStateFromCode$ = "Ohio"
	endif

endfunction