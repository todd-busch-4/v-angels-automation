/*#############################################################################################################################################################
##  filename:						cg-globalWebValidations
##
##  purpose:						library of web-based validations for use in caregiver workflow script development in order to minimize code
##									duplication, increase script cleanliness/readability, and reduce maintenance efforts by providing a single
##									centralized location for changes
##
##  contents:						webValidateText, webValidateElement, webValidateCurrPage, webWaitForText, webValidateNotNull, webValidateObjContains
##
#############################################################################################################################################################*/

'=============================================================================================================================================================
'== function name:           webValidateText
    '==
    '== developer:               todd busch
    '==
    '== purpose:                 gets the text property value from the specified html object and validates it matches expected w/error-handling & logging
    '==
    '== input parms:             object$:	descriptor of the html object validate
    '==                          text$:      the expected text value
    '==                          step$:		terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                 int:    0 - on success   
    '==                                  1 - on failure
    '==
    '== notes:                   none
    '==
'=============================================================================================================================================================*/
function webValidateText(object$, text$, step$)
    local r, object$, text$, var$

    r = gethtmledittext(object$, var$)

    if r <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": failed to get text from object", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": continuing though app is in unverified state", crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
        webValidateText = 0
        exitfunction
    endif

    if r = 0 then
        if var$ <> text$ then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation failed", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": actual value did not match expected", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected: [" + text$ + "]  actual: [" + var$ + "]", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - " + step$, crlf + crlf)
            closebrowser()
            webValidateText = 1
        endif

        if var$ = text$ then
        	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
            webValidateText = 0
        endif

    endif

endfunction

'=============================================================================================================================================================
'== function name:              webValidateElement
    '==
    '== developer:              todd busch
    '==
    '== purpose:                validates the existence of the specified html object on the current page w/error-handling & logging
    '==
    '== input parms:            objectDesc$:	descriptor of the html object to verify
    '==                         objectName$:    name/title of the object
    '==                         step$:		    terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                int:    1 - if object found   
    '==                                 error_code - on failure or object not found
    '==
    '== notes:                  none
    '==
'=============================================================================================================================================================*/
function webValidateElement(objectDesc$, objectName$, step$)
    local r

    r = existhtmlelement(objectDesc$)

    if r <> 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation failed;", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected object (" + objectName$ + ") was not found on page;", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - " + step$, crlf + crlf)
        closebrowser()
        webValidateElement = r
    endif

    if r = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
        webValidateElement = 1
    endif

endfunction

'=============================================================================================================================================================
'== function name:           webValidateCurrPage
    '==
    '== developer:               todd busch
    '==
    '== purpose:                 validates that the current page matches the expected page w/error-handling & logging
    '==
    '== input parms:             pageName$:  name of the expected page
    '==                          step$:		terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                 int:    0 - on match/success    
    '==                                  1 - on failure/no match
    '==
    '== notes:                   none
    '==
'=============================================================================================================================================================*/
function webValidateCurrPage(pageName$, step$)

	if currentpage$() <> pageName$ then
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation failed", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": actual page did not match expected", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected: (" + pageName$ + ")   actual: (" + currentpage$() + ")", crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: webValidateCurrPage failed - " + step$, crlf + crlf)
		closebrowser()
		webValidateCurrPage = 1
	else
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
		webValidateCurrPage = 0
	endif

endfunction

'=============================================================================================================================================================
'== function name:           webWaitForText
    '==
    '== developer:               todd busch
    '==
    '== purpose:                 uses ocrengine and waits the specified time for the specified text to appear in the specified area
    '==
    '== input parms:             window$:    name of window to look for text
    '==                          text$:      the text to look for
    '==                          waitTime:   the amount of time to wait for text to appear
    '==							area1:		x coordinate to the topleft point of the area to look in
    '==							area2:		y coordinate to the topleft point of the area to look in
    '==							area3:		height of the area to look in
    '==							area4:		width of the area to look in
    '==
    '== returns:                 int:    0 - on success
    '==                                  1 - on failure
    '==
    '== notes:                   in the event of a failure to find the text a call is made to adobeInvalidEmailChk function to 
    '==                          determine if the failure was a result of an invalid email
    '==
'=============================================================================================================================================================*/
function webWaitForText(window$, text$, textName$, waitTime, step$, area1, area2, area3, area4)
    local r

    r = useocrengine(3)
    pause waitTime secs until
        textocr(text$)
        inwindow(window$, 1)
        inarea(area1, area2, area3, area4)
    pausefalse
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ":  " + step$ + " validation failed", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected element text (" + textName$ + ") not found", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - " + step$, crlf + crlf)
        webWaitForText = 1
    endpause

    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
    webWaitForText = 0

endfunction

'=============================================================================================================================================================
'== function name:              webValidateNotNull
    '==
    '== developer:              todd busch
    '==
    '== purpose:                validates the value of the specified html edit object is not null/blank
    '==
    '== input parms:            objectDesc$:	descriptor of the html object to verify
    '==                         step$:		    terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                int:    0 - success/not null
    '==                                 1 - failure/null
    '==
    '== notes:                  none
    '==
'=============================================================================================================================================================*/
function webValidateNotNull(object$, step$)
    local r, retVal$

        r = gethtmledittext(object$, retVal$)

        if retVal$ = "" then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation failed", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected value but got null", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error - expected value was null" + step$, crlf + crlf)
            closebrowser()
            webValidateNotNull = 1
        endif

        if retVal$ <> "" then
           	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
            webValidateNotNull = 0
       endif

endfunction

'=============================================================================================================================================================
'== function name:              webValidateObjContains
    '==
    '== developer:              todd busch
    '==
    '== purpose:                validates that the passed text is contained in the value of the object passed
    '==
    '== input parms:            object$:    html descriptor of object with value to check
    '==                         text$:      the text to look for in the object value
    '==                         step$:		terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function webValidateObjContains(object$, text$, step$)
    local r, object$, text$, var$

    r = gethtmledittext(object$, var$)

    if r <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": webValidateObjContains failed to get text", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
		write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
		hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": webValidateObjContains: couldn't validate text - " + step$, crlf + crlf)
        webValidateObjContains = 1
        exitfunction
    endif

    if r = 0 then
        if instr(var$, text$) = 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected text not found in obj value", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": text expected [" + text$ + "]  obj value [" + var$ + "]", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        	hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": webValidateObjContains: text not found - " + step$, crlf + crlf)
            webValidateObjContains = 1
            exitfunction
        endif

        if instr(var$, text$) <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected text not found in obj value", crlf)
           	write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation was successful", crlf)
            webValidateNotNull = 0
        endif
    endif
    
endfunction

'=============================================================================================================================================================
'== function name:              webValidateChecked
    '==
    '== developer:              todd busch
    '==
    '== purpose:                verifies if the html checkbox or radio button is checked
    '==
    '== input parms:            object$:    html descriptor of object to check
    '==                         step$:		terse description of the action/step in the script (e.g. "clicking login")
    '==
    '== returns:                int:    0 - not checked
    '==                                 1 - checked
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function webValidateChecked(object$, step$)
    local r, object$, step$

    r = checkedhtml(object$)

    if r = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation successfull", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": object was checked", crlf)
        webValidateChecked = 1
        exitfunction
    endif

    if r <> 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + step$ + " validation failed", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": object was not checked", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-" + step$ + ".bmp", 1, 1)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": webValidateChecked: failed while " + step$, crlf + crlf)
        webValidateChecked = 0
        exitfunction
    endif
    
endfunction