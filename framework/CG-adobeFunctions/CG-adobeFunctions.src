/*#############################################################################################################################################################
##  filename:						cg-adobeFunctions
##
##  purpose:						library of functions for use in adobe workflow script development in order to minimize code duplication,
##									increase script cleanliness/readability, and reduce maintenance efforts by providing a single centralized
##									location for changes
##
##  contents:						adobeSendStatusChk, adobeLogIn, adobeInvalidEmailChk, adobeCancelStatusChk, adobeClickSearchIcon, adobeChkForCancelStatus,
##                                  adobeCancelPacket
##
#############################################################################################################################################################*/

/*=============================================================================================================================================================
== function name:           adobeSendStatusChk
==
== developer:               todd busch
==
== purpose:                 compares current value of adobe status column to specified status to determine if packet should be sent or bypassed
==
== input parms:             status$:    text that if found in current column value will bypass sending pkt
==                          name$:      name of the packet
==
== returns:                 int:    1 - if text was found and send should be bypassed
==                                  0 - if not found and workflow should continue
==
== notes:                   none
==
=============================================================================================================================================================*/

function adobeSendStatusChk(status$, name$)
    local status$, name$
    
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking packet status", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": value of adobePcktStatus: " + adobePcktStatus$, crlf)
    if instr(adobePcktStatus$, status$) <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates " + name$ + " packet has already been sent", crlf)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + name$ + " packet has been sent", crlf)
        adobeSendStatusChk = 1
    else
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates it is ok to send " + name$ + " packet", crlf)
        adobeSendStatusChk = 0
    endif

endfunction


/*=============================================================================================================================================================
== function name:           adobeLogIn
==
== developer:               todd busch
==
== purpose:                 looks for object associated with the login page in most recent invoked browser to determine if account was not logged in;
==                          if found logs into account with credentials defined in cg-globalVariables
==
== input parms:             none
==
== returns:                 int:    1 - if found and not able to log in successfully
==                                  0 - if not found or if found and log in was successful
==
== notes:                   variables used are defined in cg-globalVariables and currently use the caremgr@v-angels.com account
==
=============================================================================================================================================================*/
function adobeLogIn()

    if existhtmlelement(txtUsername$) = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobe acct was not signed in", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": logging in", crlf)
        usepage(pgLogin$)
        writehtml(txtUsername$, adobeUsername$)
        writehtml(txtPassword$, adobePassword$)
        clickhtmlelement(btnContinue$)
        pause 3
        if currentpage$() <> pgHomePage$ then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error logging in. browser not loaded to expected page", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected: 'Adobe Acrobat Home'  actual: '" + currentpage$() + "'", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-login_error.bmp", 1, 1)
            closebrowser()
            adobeLogIn = 1
        else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": log in was successful", crlf)
            adobeLogIn = 0
        endif
    else
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": account was already signed in", crlf)
        adobeLogIn = 0
    endif

endfunction


/*=============================================================================================================================================================
== function name:           adobeInvalidEmailChk
==
== developer:               todd busch
==
== purpose:                 captures text on current page using ocrengine and checks for text indicating an email entered was invalid
==
== input parms:             none
==
== returns:                 int:    1 - if text was found indicating error exists
==
== notes:                   this function is called from within a waitForText validation used throughout the adobeSend script to check
==                          if an error encountered was because of an invalid email eliminating the need for further troubleshooting
==
=============================================================================================================================================================*/
function adobeInvalidEmailChk()
    local val$, res

    res = useocrengine(3)
    val$ = captureocr$(wndHomePage$, topinstance())
    if instr(val$, "Email provided is invalid") <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": email provided is invalid; resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-invalid_email.bmp", 1, 1)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: invalid email", crlf + crlf)
        closebrowser()
        adobeInvalidEmailChk = 1
    endif

endfunction


/*=============================================================================================================================================================
== function name:           adobeCancelStatusChk
==
== developer:               todd busch
==
== purpose:                 evaluates current value of adobe status column to determine if packet should be cancelled or bypassed
==
== input parms:             packet$:    name of packet checking status for
==
== returns:                 int:    0 - if workflow should continue
==                                  1 - if text for packet being checked was found indicating packet is complete and cant be cancelled or
==                                      is already cancelled
==
== notes:                   none
==
=============================================================================================================================================================*/
function adobeCancelStatusChk(packet$)
    local packet$

    if packet$ = "pre 1st" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking status oF pre 1st interview packet", crlf)
        if instr(adobePcktStatus$, "Pre 1st Pkt Complete") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has 'complete' status and can't be cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has 'complete' status and can't be cancelled", crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
        if instr(adobePcktStatus$, "Pre 1st Pkt Canceled") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has already been cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has already been cancelled", crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
            
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates packet can be cancelled", crlf)
        adobeCancelStatusChk = 0
        exitfunction
    endif

endfunction


/*=============================================================================================================================================================
== function name:           adobeClickSearchIcon
==
== developer:               todd busch
==
== purpose:                 due to a glitch that occurs with adobe intermittently this function was created to try clicking the search icon
==                          multiple times
==
== input parms:             none
==
== returns:                 int:    0 - on success
==                                  error_code - on failure
==
== notes:                   pertinentinfo
==
=============================================================================================================================================================*/
function adobeClickSearchIcon()
    local iRetry, r, iAttempt

    while iRetry <= 2
        usepage(pgHomePage$)
        r = clickhtmlelement(btnSearch$)
        pause 2
        iAttempt = iRetry + 1

        if r <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking search icon on attempt: [" + str$(iAttempt) + "]", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "); retrying", crlf)
            iRetry = iRetry + 1
            pause 2
        endif

        if r = 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": clicked search icon", crlf)
            adobeClickSearchIcon = 0
            exitfunction
        endif
    wend

    if r <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": search icon could not be clicked after: [" + str$(iAttempt) + "] attempts", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "); msg: " + #errormsg$, crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_search_" + str$(iAttempt) + ".bmp", 1, 1)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ":  workflow failed; proceeding to next change event", crlf + crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error -  clicking search icon", crlf + crlf)
        closebrowser()
        adobeClickSearchIcon = r
    endif

endfunction


/*=============================================================================================================================================================
== function name:           adobeChkForCancelStatus
==
== developer:               todd busch
==
== purpose:                 checks status of packet in adobe to see if it was previously cancelled
==
== input parms:             packet$:    the name of the packet being checked
==
== returns:                 int:    0 - if packet is not in a cancelled state
==                                  1 - if packet is in a cancelled state/status
==
== notes:                   none
==
=============================================================================================================================================================*/
function adobeChkForCancelStatus(packet$)
    local r, packet$

    r = existhtmlelement(lblPacketStatus$)
    if r = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + packet$ + " is already in cancelled state", crlf)
        if packet$ = "pre 1st pkt" then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + packet$ + " is already cancelled", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "cancel_check.bmp", 1, 1)
            closebrowser()
           adobeChkForCancelStatus = 1
      else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": packet already cancelled; proceeding to next event", crlf + crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "cancel_check.bmp", 1, 1)
            closebrowser()
            adobeChkForCancelStatus = 1
       endif
    endif

    if r = 0 then
        adobeChkForCancelStatus = 0
    endif

endfunction

/*=============================================================================================================================================================
== function name:           adobeCancelPacket
==
== developer:               todd busch
==
== purpose:                 due to a bug in adobe where intermittently the cancel button is initally loaded in an unclickable state, this function was
==                          created to attempt the click multiple times before failing the script
==
== input parms:             packet$:    the name of the packet being cancelled
==
== returns:                 typeValue
==
== notes:                   pertinentinfo
==
=============================================================================================================================================================*/
function adobeCancelPacket(packet$)
    local r, iRetry, iAttempt, packet$

    while iRetry <= 2
        r = clickhtmlelement(btnCancel$, left)
        pause 2
        iAttempt = iRetry + 1

        if r <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking 'cancel' button on attempt: [" + str$(iAttempt) + "]", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_cancel_button-" + iAttempt + ".bmp", 1, 1)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") retrying", crlf)
            iRetry = iRetry + 1
            pause 2
        endif

        if r = 0 then
            adobeCancelPacket = 0
            exitfunction
        endif
    wend

    if r <> 0 then
        write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": could not click cancel after [" + str$(iattempt) + "] attempts", crlf)
        write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
            if packet$ = "pre 1st pkt" then
                write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
                write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": cancel pre 1st pkt failed", crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - pre 1st cancel", crlf + crlf)
            else
                write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
                write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": cancel " + packet$ + " failed; proceeding to next change event", crlf + crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
                write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error - " + packet$ + " cancel", crlf + crlf)
            endif
        closebrowser()
        adobeCancelPacket = 1
    endif

endfunction