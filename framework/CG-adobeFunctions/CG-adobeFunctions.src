'###############################################################################################################################################################
'##  filename:              cg-adobeFunctions
'##
'##  purpose:               library of functions for use in adobe workflow script development in order to minimize code duplication, increase script
'##                         cleanliness/readability, and reduce maintenance efforts by providing a single centralized location for changes
'##
'###############################################################################################################################################################

'===============================================================================================================================================================
'== function name:              adobeSendStatusChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                compares current value of adobe status column to specified status to determine if packet should be sent or bypassed
    '==
    '== input parms:            str_status$:    text that if found in current column value will bypass sending pkt
    '==                         str_name$:      name of the packet
    '==
    '== returns:                int:    1 - if text was found and send should be bypassed
    '==                                 0 - if not found and workflow should continue
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeSendStatusChk(str_status$, str_name$)
    local str_status$, str_name$
    
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking packet status", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobePcktStatus: " + adobePcktStatus$, crlf)
    if instr(adobePcktStatus$, str_status$) <> 0 then
        if str_status$ = "Pre 1st Pkt" then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates " + str_name$ + " packet has already been sent", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st int pkt", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_name$ + " packet has been sent; skipping to 1st int pkt", crlf)
            adobeSendStatusChk = 1
            exitfunction
        else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates " + str_name$ + " packet has already been sent", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_name$ + " packet has been sent; proceeding to next chg event", crlf + crlf)
            adobeSendStatusChk = 1
            exitfunction           
        endif
	endif

    if instr(adobePcktStatus$, str_status$) = 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates it is ok to send " + str_name$ + " packet", crlf)
        adobeSendStatusChk = 0
        exitfunction
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeCancelStageChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                determines if the current stage matches a triggering value
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success/match
    '==                                 1 - failure/no match
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeCancelStageChk()

    if curr_stage$ = "1st interview Cancelled" or curr_stage$ = "1st Interview NCNS" or curr_stage$ = "2nd Interview Cancelled" or curr_stage$ = "2nd Interview NCNS" then
        adobeCancelStageChk = 0
        exitfunction
    else
        adobeCancelStageChk = 1
        exitfunction
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeCancelStatusChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                evaluates current value of adobe status column to determine if packet should be cancelled or bypassed
    '==
    '== input parms:            str_packet$:    name of packet checking status for (pre 1st, 1st, 2nd)
    '==
    '== returns:                int:    0 - if workflow should continue
    '==                                 1 - if text for packet being checked was found indicating packet is complete and cant be cancelled or
    '==                                     is already cancelled
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeCancelStatusChk(str_packet$)
    local str_packet$

    if str_packet$ = "pre 1st" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking status of pre 1st interview packet", crlf)
        if instr(adobePcktStatus$, "Pre 1st Pkt Complete") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has 'complete' status and can't be cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has 'complete' status and can't be cancelled", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - pre 1st pkt has complete status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
        if instr(adobePcktStatus$, "Pre 1st Pkt Canceled") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has already been cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": pre 1st packet has already been cancelled", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - pre 1st pkt has cancelled status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
            
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates packet can be cancelled", crlf)
        adobeCancelStatusChk = 0
        exitfunction
    endif

    if str_packet$ = "1st" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking status of 1st interview packet", crlf)
        if instr(adobePcktStatus$, "1st Int Pkt Complete") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st Int Pkt has 'complete' status and can't be cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st int pkt has 'complete' status and can't be cancelled", crlf + crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - 1st int pkt has complete status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
        if instr(adobePcktStatus$, "1st Int Pkt Canceled") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st Int Pkt has already been cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st int pkt has already been cancelled", crlf + crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - 1st int pkt has cancelled status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
            
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates packet can be cancelled", crlf)
        adobeCancelStatusChk = 0
        exitfunction
    endif

    if str_packet$ = "2nd" then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": checking status of 2nd interview packet", crlf)
        if instr(adobePcktStatus$, "2nd Int Pkt Complete") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd Int Pkt has 'complete' status and can't be cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd int pkt has 'complete' status and can't be cancelled", crlf + crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - 2nd int pkt has complete status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
        if instr(adobePcktStatus$, "2nd Int Pkt Canceled") <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd Int Pkt has already been cancelled", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd int pkt has already been cancelled", crlf + crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
		    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobeCancelStatusChk - 2nd int pkt has cancelled status", crlf + crlf)
            adobeCancelStatusChk = 1
            exitfunction
        endif
            
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": status indicates packet can be cancelled", crlf)
        adobeCancelStatusChk = 0
        exitfunction
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeLogIn
    '==
    '== developer:              todd busch
    '==
    '== purpose:                looks for object associated with the login page in most recent invoked browser to determine if account was not logged in;
    '==                         if found logs into account with credentials defined in cg-globalVariables
    '==
    '== input parms:            none
    '==
    '== returns:                int:    1 - if found and not able to log in successfully
    '==                                 0 - if not found or if found and log in was successful
    '==
    '== notes:                  variables used are defined in cg-globalVariables and currently use the caremgr@v-angels.com account
    '==
'===============================================================================================================================================================
function adobeLogIn()

    if existhtmlelement(inputAdobeUsername$) = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": adobe acct was not signed in", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": logging in", crlf)
        usepage(pgAdobeLogin$)
        writehtml(inputAdobeUsername$, adobeUsername$)
        writehtml(inputAdobePassword$, adobePassword$)
        clickhtmlelement(btnAdobeContinue$)
        pause 3
        if currentpage$() <> pgAdobeHomePage$ then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error logging in. browser not loaded to expected page", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": expected: 'Adobe Acrobat Home'  actual: '" + currentpage$() + "'", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-login_error.bmp", 1, 1)
            closebrowser()
            adobeLogIn = 1
        else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": log in was successful", crlf)
            adobeLogIn = 0
        endif
    else
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": account was already signed in", crlf)
        adobeLogIn = 0
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeClickSearchIcon
    '==
    '== developer:              todd busch
    '==
    '== purpose:                due to a glitch that occurs with adobe intermittently this function was created to try clicking the search icon
    '==                         multiple times
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - on success
    '==                                 1 - on failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeClickSearchIcon()
    local iRetry, r, iAttempt

    while iRetry <= 2
        usepage(pgAdobeHomePage$)
        r = clickhtmlelement(btnAdobeSearch$)
        pause 2
        iAttempt = iRetry + 1

        if r <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking search icon on attempt: [" + str$(iAttempt) + "]", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "); retrying", crlf)
            iRetry = iRetry + 1
            pause 2
        endif

        if r = 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": clicked search icon", crlf)
            adobeClickSearchIcon = 0
            exitfunction
        endif
    wend

    if r <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": search icon could not be clicked after: [" + str$(iAttempt) + "] attempts", crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + "); msg: " + #errormsg$, crlf)
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_search_" + str$(iAttempt) + ".bmp", 1, 1)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ":  workflow failed; proceeding to next change event", crlf + crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: script error -  clicking search icon", crlf + crlf)
        closebrowser()
        adobeClickSearchIcon = 1
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeInvalidEmailChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                captures text on current page using ocrengine and checks for text indicating an email entered was invalid
    '==
    '== input parms:            none
    '==
    '== returns:                int:    1 - if text was found indicating error exists
    '==
    '== notes:                  this function is called from within a waitForText validation used throughout the adobeSend script to check
    '==                         if an error encountered was because of an invalid email thus eliminating the need for further troubleshooting
    '==
'===============================================================================================================================================================
function adobeInvalidEmailChk()
    local sVal$, iRes

    iRes = useocrengine(3)

    sVal$ = captureocr$(wndAdobeHomePage$, topinstance())

    if instr(sVal$, "Email provided is invalid") <> 0 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": email provided is invalid; resuming scan for next change event", crlf + crlf)
        hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-invalid_email.bmp", 1, 1)
        write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow failed; proceeding to next change event", crlf + crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
        write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: invalid email", crlf + crlf)
        closebrowser()
        adobeInvalidEmailChk = 1
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeCancelCompileSrcStr$
     '==
    '== developer:              todd busch
    '==
    '== purpose:                compiles the search string to use in packet search
    '==
    '== input parms:            str_packet$:    the name of the packet searching for (PRE, 1st, 2nd)
    '==
    '== returns:                str:    the compiled search string
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeCancelCompileSrcStr$(str_packet$)
    adobeCancelCompileSrcStr$ = "<Doublequote>" + applicantFName$ + " " + applicantLName$ + " " + str_packet$ + "<Doublequote><enter>"
endfunction

'===============================================================================================================================================================
'== function name:              adobeNoResultsErrorChk
    '==
    '== developer:              todd busch
    '==
    '== purpose:                checks for the no results message when doing a packet search
    '==
    '== input parms:            str_pkt$:   packet searching for (pre 1st, 1st, 2nd)
    '==
    '== returns:                int:    0 - message not found
    '==                                 1 - message found
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeNoResultsErrorChk(str_pkt$)
    local r

    r = existhtmlelement(txtAdobeNoResults$)

    if r = 1 then
        if str_pkt$ = "pre 1st" then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_pkt$ + " int pkt search returned no results", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-pre-cancel_no_search_results.bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": search for pre 1st int pkt returned no results", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error; no pre 1st pkt search results", crlf + crlf)
            closebrowser()
            adobeNoResultsErrorChk = 1
            exitfunction
        else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_pkt$ + " int pkt search returned no results", crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + str_pkt$ + "_cancel_no_search_results.bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": search for " + str_pkt$ + " int pkt returned no results", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: validation error; no " + str_pkt$ + " pkt search results", crlf + crlf)
            closebrowser()
            adobeNoResultsErrorChk = 1
            exitfunction
        endif
    endif

    if r <> 1 then
        adobeNoResultsErrorChk = 0
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeChkPktForCancelStatus
    '==
    '== developer:              todd busch
    '==
    '== purpose:                checks status of packet in adobe to see if it was previously cancelled
    '==
    '== input parms:            str_packet$:    the name of the packet being checked
    '==
    '== returns:                int:    0 - if packet is not in a cancelled state
    '==                                 1 - if packet is in a cancelled state/status
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeChkPktForCancelStatus(str_packet$)
    local r, str_packet$

    r = existhtmlelement(txtAdobePktStatus$)

    if r = 1 then
        write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_packet$ + " pkt is already in cancelled state", crlf)
        if str_packet$ = "pre 1st" then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-pkt_cancel_check.bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_packet$ + " pkt is already cancelled", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_packet$ + " pkt already cancelled", crlf + crlf)
            closebrowser()
            adobeChkPktForCancelStatus = 1
            exitfunction
      else
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "cancel_check.bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_packet$ + " pkt is already cancelled", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": " + str_packet$ + " pkt already cancelled", crlf + crlf)
            closebrowser()
            adobeChkPktForCancelStatus = 1
            exitfunction
       endif
    endif

    if r = 0 then
        adobeChkPktForCancelStatus = 0
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeClickCancel
    '==
    '== developer:              todd busch
    '==
    '== purpose:                due to a bug in adobe where intermittently the cancel button is initally loaded in an unclickable state, this function was
    '==                         created to attempt the click multiple times before failing the script
    '==
    '== input parms:            str_packet$:    the name of the packet being cancelled
    '==
    '== returns:                int:    0 - on success
    '==                                 1 - on failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeClickCancel(str_packet$)
    local r, iRetry, iAttempt, str_packet$

    while iRetry <= 2
        r = clickhtmlelement(btnAdobeCancel$, left)
        pause 2
        iAttempt = iRetry + 1

        if r <> 0 then
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error clicking 'cancel' button on attempt: [" + str$(iAttempt) + "]", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_cancel_button-" + str$(iAttempt) + ".bmp", 1, 1)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") retrying", crlf)
            iRetry = iRetry + 1
            pause 2
        endif

        if r = 0 then
            adobeClickCancel = 0
            exitfunction
        endif
    wend

    if r <> 0 then
        if str_packet$ = "pre 1st" then
            write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": could not click cancel after [" + str$(iattempt) + "] attempts", crlf)
            write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": skipping to 1st interview packet", crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_cancel_button-" + str$(iAttempt) + ".bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": cancel " + str_packet$ + " failed", crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: cancel " + str_packet$ + " pkt failed clicking cancel button", crlf + crlf)
            closebrowser()
            adobeClickCancel = 1
            exitfunction
        else
            write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": could not click cancel after [" + str$(iattempt) + "] attempts", crlf)
            write(debuglogpath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": error_code: (" + str$(r) + ") msg: " + #errormsg$, crlf)
            write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": resuming scan for next change event", crlf + crlf)
            hardcopy(screenshotsPath$ + currScript$ + "-" + applicantLName$ + "-click_cancel_button-" + str$(iAttempt) + ".bmp", 1, 1)
            write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ":  workflow failed; proceeding to next change event", crlf + crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": record id: " + applicantID$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": applicant: " + applicantFName$ + " " + applicantLName$, crlf)
            write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": result: cancel " + str_packet$ + " pkt failed clicking cancel button", crlf + crlf)
            closebrowser()
            adobeClickCancel = 1
            exitfunction
        endif
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeCancelGetReason
    '==
    '== developer:              todd busch
    '==
    '== purpose:                determines text to enter into cancel dialogbox by looking at current stage value
    '==
    '== input parms:            none
    '==
    '== returns:                str:    Cancelled or NCNS
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeCancelGetReason$()

    if instr(curr_stage$, "Cancelled") <> 0 then
        adobeCancelGetReason$ = "Cancelled."
        exitfunction
    else
        adobeCancelGetReason$ = "NCNS."
        exitfunction
    endif

endfunction

'===============================================================================================================================================================
'== function name:              adobeCancelLogStats
    '==
    '== developer:              todd busch
    '==
    '== purpose:                writes stats to various log files
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeCancelLogStats()
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:            " + str$(iEventCnt), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": stage matches detected:            " + str$(iStageCnt), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Pre First Cancels completed:       " + str$(iPreCompl), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": First Int Cancels completed:       " + str$(iFirstCompl), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Second Int Cancels completed:      " + str$(iSecondCompl), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:            " + str$(iEventCnt), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": stage matches detected:            " + str$(iStageCnt), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Pre First Cancels completed:       " + str$(iPreCompl), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": First Int Cancels completed:       " + str$(iFirstCompl), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": Second Int Cancels completed:      " + str$(iSecondCompl), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    adobeCancelLogStats = 0
endfunction

'===============================================================================================================================================================
'== function name:              adobeSendLogStats
    '==
    '== developer:              todd busch
    '==
    '== purpose:                writes stats to various log files
    '==
    '== input parms:            none
    '==
    '== returns:                int:    0 - success
    '==                                 1 - failure
    '==
    '== notes:                  none
    '==
'===============================================================================================================================================================
function adobeSendLogStats()
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events detected:                    " + str$(iEventCnt), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events with '1st interview' stage:  " + str$(iFirstCnt), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st interview packets sent:                " + str$(iFirstCompl), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events with '2nd interview' stage:  " + str$(iSecondCnt), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd interview packets sent:                " + str$(iSecondCompl), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": workflow scan completed", crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ------------------------------------------------------", crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change event rows detected:                " + str$(iEventCnt), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": events with '1st interview' stage:         " + str$(iFirstCnt), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 1st interview packets sent:                " + str$(iFirstCompl), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": change events with '2nd interview' stage:  " + str$(iSecondCnt), crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": 2nd interview packets sent:                " + str$(iSecondCompl), crlf)
    write(debugLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(executionLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(scanFailuresPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)
    write(successLogPath$, basicLogHdr$ + Time$() + ": " + currScript$ + ": ==================================== end workflow =======================================", crlf + crlf)

    adobeSendLogStats = 0
endfunction








